
STRM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f4  080041f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  0800426c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  0800426c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007253  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ff  00000000  00000000  000272ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00028bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  00029418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a96  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000913b  00000000  00000000  0004161e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000850a7  00000000  00000000  0004a759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000cf850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080040cc 	.word	0x080040cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080040cc 	.word	0x080040cc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__aeabi_ldivmod>:
 8000980:	b97b      	cbnz	r3, 80009a2 <__aeabi_ldivmod+0x22>
 8000982:	b972      	cbnz	r2, 80009a2 <__aeabi_ldivmod+0x22>
 8000984:	2900      	cmp	r1, #0
 8000986:	bfbe      	ittt	lt
 8000988:	2000      	movlt	r0, #0
 800098a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800098e:	e006      	blt.n	800099e <__aeabi_ldivmod+0x1e>
 8000990:	bf08      	it	eq
 8000992:	2800      	cmpeq	r0, #0
 8000994:	bf1c      	itt	ne
 8000996:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800099a:	f04f 30ff 	movne.w	r0, #4294967295
 800099e:	f000 b9a9 	b.w	8000cf4 <__aeabi_idiv0>
 80009a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009aa:	2900      	cmp	r1, #0
 80009ac:	db09      	blt.n	80009c2 <__aeabi_ldivmod+0x42>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db1a      	blt.n	80009e8 <__aeabi_ldivmod+0x68>
 80009b2:	f000 f835 	bl	8000a20 <__udivmoddi4>
 80009b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009be:	b004      	add	sp, #16
 80009c0:	4770      	bx	lr
 80009c2:	4240      	negs	r0, r0
 80009c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db1b      	blt.n	8000a04 <__aeabi_ldivmod+0x84>
 80009cc:	f000 f828 	bl	8000a20 <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4240      	negs	r0, r0
 80009dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e0:	4252      	negs	r2, r2
 80009e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e6:	4770      	bx	lr
 80009e8:	4252      	negs	r2, r2
 80009ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ee:	f000 f817 	bl	8000a20 <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4240      	negs	r0, r0
 80009fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a02:	4770      	bx	lr
 8000a04:	4252      	negs	r2, r2
 8000a06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a0a:	f000 f809 	bl	8000a20 <__udivmoddi4>
 8000a0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a16:	b004      	add	sp, #16
 8000a18:	4252      	negs	r2, r2
 8000a1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9e08      	ldr	r6, [sp, #32]
 8000a26:	460d      	mov	r5, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14d      	bne.n	8000acc <__udivmoddi4+0xac>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4694      	mov	ip, r2
 8000a34:	d968      	bls.n	8000b08 <__udivmoddi4+0xe8>
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	b152      	cbz	r2, 8000a52 <__udivmoddi4+0x32>
 8000a3c:	fa01 f302 	lsl.w	r3, r1, r2
 8000a40:	f1c2 0120 	rsb	r1, r2, #32
 8000a44:	fa20 f101 	lsr.w	r1, r0, r1
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	ea41 0803 	orr.w	r8, r1, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000a56:	fbb8 f7f1 	udiv	r7, r8, r1
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	fb01 8817 	mls	r8, r1, r7, r8
 8000a62:	fb07 f00e 	mul.w	r0, r7, lr
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6c:	4298      	cmp	r0, r3
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x66>
 8000a70:	eb1c 0303 	adds.w	r3, ip, r3
 8000a74:	f107 35ff 	add.w	r5, r7, #4294967295
 8000a78:	f080 811e 	bcs.w	8000cb8 <__udivmoddi4+0x298>
 8000a7c:	4298      	cmp	r0, r3
 8000a7e:	f240 811b 	bls.w	8000cb8 <__udivmoddi4+0x298>
 8000a82:	3f02      	subs	r7, #2
 8000a84:	4463      	add	r3, ip
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	fbb3 f0f1 	udiv	r0, r3, r1
 8000a8c:	fb01 3310 	mls	r3, r1, r0, r3
 8000a90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a94:	b2a4      	uxth	r4, r4
 8000a96:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9a:	45a6      	cmp	lr, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x94>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa6:	f080 8109 	bcs.w	8000cbc <__udivmoddi4+0x29c>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f240 8106 	bls.w	8000cbc <__udivmoddi4+0x29c>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	eba4 040e 	sub.w	r4, r4, lr
 8000aba:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000abe:	b11e      	cbz	r6, 8000ac8 <__udivmoddi4+0xa8>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	40d4      	lsrs	r4, r2
 8000ac4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d908      	bls.n	8000ae2 <__udivmoddi4+0xc2>
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	f000 80ee 	beq.w	8000cb2 <__udivmoddi4+0x292>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e9c6 0500 	strd	r0, r5, [r6]
 8000adc:	4608      	mov	r0, r1
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f183 	clz	r1, r3
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d14a      	bne.n	8000b80 <__udivmoddi4+0x160>
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd4>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fc 	bhi.w	8000cec <__udivmoddi4+0x2cc>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb65 0303 	sbc.w	r3, r5, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e2      	beq.n	8000ac8 <__udivmoddi4+0xa8>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7df      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xec>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 8091 	bne.w	8000c38 <__udivmoddi4+0x218>
 8000b16:	eba1 000c 	sub.w	r0, r1, ip
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b20:	fa1f fe8c 	uxth.w	lr, ip
 8000b24:	fbb0 f3f7 	udiv	r3, r0, r7
 8000b28:	fb07 0013 	mls	r0, r7, r3, r0
 8000b2c:	0c25      	lsrs	r5, r4, #16
 8000b2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000b32:	fb0e f003 	mul.w	r0, lr, r3
 8000b36:	42a8      	cmp	r0, r5
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x12c>
 8000b3a:	eb1c 0505 	adds.w	r5, ip, r5
 8000b3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x12a>
 8000b44:	42a8      	cmp	r0, r5
 8000b46:	f200 80ce 	bhi.w	8000ce6 <__udivmoddi4+0x2c6>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	1a2d      	subs	r5, r5, r0
 8000b4e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000b52:	fb07 5510 	mls	r5, r7, r0, r5
 8000b56:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x156>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b6c:	d202      	bcs.n	8000b74 <__udivmoddi4+0x154>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f200 80b6 	bhi.w	8000ce0 <__udivmoddi4+0x2c0>
 8000b74:	4628      	mov	r0, r5
 8000b76:	eba4 040e 	sub.w	r4, r4, lr
 8000b7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7e:	e79e      	b.n	8000abe <__udivmoddi4+0x9e>
 8000b80:	f1c1 0720 	rsb	r7, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b96:	fbba f8f9 	udiv	r8, sl, r9
 8000b9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000b9e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000ba2:	408d      	lsls	r5, r1
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	431d      	orrs	r5, r3
 8000baa:	fa00 f301 	lsl.w	r3, r0, r1
 8000bae:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb2:	0c2c      	lsrs	r4, r5, #16
 8000bb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d90b      	bls.n	8000bd8 <__udivmoddi4+0x1b8>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc8:	f080 8088 	bcs.w	8000cdc <__udivmoddi4+0x2bc>
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	f240 8085 	bls.w	8000cdc <__udivmoddi4+0x2bc>
 8000bd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd6:	4464      	add	r4, ip
 8000bd8:	1a24      	subs	r4, r4, r0
 8000bda:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bde:	fb09 4410 	mls	r4, r9, r0, r4
 8000be2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1e2>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000bf8:	d26c      	bcs.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	d96a      	bls.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c06:	fba0 9502 	umull	r9, r5, r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	42ac      	cmp	r4, r5
 8000c10:	46c8      	mov	r8, r9
 8000c12:	46ae      	mov	lr, r5
 8000c14:	d356      	bcc.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c16:	d053      	beq.n	8000cc0 <__udivmoddi4+0x2a0>
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d069      	beq.n	8000cf0 <__udivmoddi4+0x2d0>
 8000c1c:	ebb3 0208 	subs.w	r2, r3, r8
 8000c20:	eb64 040e 	sbc.w	r4, r4, lr
 8000c24:	fa22 f301 	lsr.w	r3, r2, r1
 8000c28:	fa04 f707 	lsl.w	r7, r4, r7
 8000c2c:	431f      	orrs	r7, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c6 7400 	strd	r7, r4, [r6]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e747      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	f1c2 0120 	rsb	r1, r2, #32
 8000c40:	fa25 f301 	lsr.w	r3, r5, r1
 8000c44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c48:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	430d      	orrs	r5, r1
 8000c50:	fbb3 f1f7 	udiv	r1, r3, r7
 8000c54:	fb07 3311 	mls	r3, r7, r1, r3
 8000c58:	fa1f fe8c 	uxth.w	lr, ip
 8000c5c:	0c28      	lsrs	r0, r5, #16
 8000c5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c62:	fb01 f30e 	mul.w	r3, r1, lr
 8000c66:	4283      	cmp	r3, r0
 8000c68:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x260>
 8000c6e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c72:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c76:	d22f      	bcs.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c78:	4283      	cmp	r3, r0
 8000c7a:	d92d      	bls.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c7c:	3902      	subs	r1, #2
 8000c7e:	4460      	add	r0, ip
 8000c80:	1ac0      	subs	r0, r0, r3
 8000c82:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c86:	fb07 0013 	mls	r0, r7, r3, r0
 8000c8a:	b2ad      	uxth	r5, r5
 8000c8c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c90:	fb03 f00e 	mul.w	r0, r3, lr
 8000c94:	42a8      	cmp	r0, r5
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x28a>
 8000c98:	eb1c 0505 	adds.w	r5, ip, r5
 8000c9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca0:	d216      	bcs.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca2:	42a8      	cmp	r0, r5
 8000ca4:	d914      	bls.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	4465      	add	r5, ip
 8000caa:	1a28      	subs	r0, r5, r0
 8000cac:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cb0:	e738      	b.n	8000b24 <__udivmoddi4+0x104>
 8000cb2:	4631      	mov	r1, r6
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e707      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000cb8:	462f      	mov	r7, r5
 8000cba:	e6e4      	b.n	8000a86 <__udivmoddi4+0x66>
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	e6f9      	b.n	8000ab4 <__udivmoddi4+0x94>
 8000cc0:	454b      	cmp	r3, r9
 8000cc2:	d2a9      	bcs.n	8000c18 <__udivmoddi4+0x1f8>
 8000cc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ccc:	3801      	subs	r0, #1
 8000cce:	e7a3      	b.n	8000c18 <__udivmoddi4+0x1f8>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	e7ea      	b.n	8000caa <__udivmoddi4+0x28a>
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	e794      	b.n	8000c02 <__udivmoddi4+0x1e2>
 8000cd8:	4641      	mov	r1, r8
 8000cda:	e7d1      	b.n	8000c80 <__udivmoddi4+0x260>
 8000cdc:	46d0      	mov	r8, sl
 8000cde:	e77b      	b.n	8000bd8 <__udivmoddi4+0x1b8>
 8000ce0:	4464      	add	r4, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	e747      	b.n	8000b76 <__udivmoddi4+0x156>
 8000ce6:	3b02      	subs	r3, #2
 8000ce8:	4465      	add	r5, ip
 8000cea:	e72f      	b.n	8000b4c <__udivmoddi4+0x12c>
 8000cec:	4608      	mov	r0, r1
 8000cee:	e706      	b.n	8000afe <__udivmoddi4+0xde>
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e6e9      	b.n	8000ac8 <__udivmoddi4+0xa8>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2203      	movs	r2, #3
 8000d16:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	715a      	strb	r2, [r3, #5]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b088      	sub	sp, #32
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	460b      	mov	r3, r1
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	837b      	strh	r3, [r7, #26]
				== HAL_OK) {
			*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
			return true;
		} else
			return false;*/
	int len = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
	for (int i = 0; i<len ; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	e011      	b.n	8000d72 <read_register16+0x44>
	{
		value[i] = SW_I2C_ReadControl_8Bit(SW_I2C1,tx_buff,addr);
 8000d4e:	8b7b      	ldrh	r3, [r7, #26]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	7afa      	ldrb	r2, [r7, #11]
 8000d54:	4619      	mov	r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	f001 f981 	bl	800205e <SW_I2C_ReadControl_8Bit>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	b28a      	uxth	r2, r1
 8000d6a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i<len ; i++)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dbe9      	blt.n	8000d4e <read_register16+0x20>
	}
	*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000d7a:	7c7b      	ldrb	r3, [r7, #17]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	7c3b      	ldrb	r3, [r7, #16]
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	801a      	strh	r2, [r3, #0]
return 1;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	461a      	mov	r2, r3
 8000da4:	460b      	mov	r3, r1
 8000da6:	72fb      	strb	r3, [r7, #11]
 8000da8:	4613      	mov	r3, r2
 8000daa:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	827b      	strh	r3, [r7, #18]
	/*SW_I2C_ReadnControl_8Bit(dev->i2c, tx_buff, addr, 1, value)
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
		return 0;
	else
		return 1;*/
	for (int i = 0; i<len ; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00b      	b.n	8000dd2 <read_data+0x3a>
	{
		value[i] = SW_I2C_ReadControl_8Bit_OnlyData(SW_I2C1,0xEF);
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	18d4      	adds	r4, r2, r3
 8000dc0:	21ef      	movs	r1, #239	; 0xef
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f001 f918 	bl	8001ff8 <SW_I2C_ReadControl_8Bit_OnlyData>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i<len ; i++)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	7abb      	ldrb	r3, [r7, #10]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbef      	blt.n	8000dba <read_data+0x22>
	}
return 1;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd90      	pop	{r4, r7, pc}

08000de4 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	461a      	mov	r2, r3
 8000df0:	2188      	movs	r1, #136	; 0x88
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff9b 	bl	8000d2e <read_register16>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d06f      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3302      	adds	r3, #2
 8000e02:	461a      	mov	r2, r3
 8000e04:	218a      	movs	r1, #138	; 0x8a
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff91 	bl	8000d2e <read_register16>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d065      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3304      	adds	r3, #4
 8000e16:	461a      	mov	r2, r3
 8000e18:	218c      	movs	r1, #140	; 0x8c
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff87 	bl	8000d2e <read_register16>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d05b      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3306      	adds	r3, #6
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	218e      	movs	r1, #142	; 0x8e
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff7d 	bl	8000d2e <read_register16>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d051      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3308      	adds	r3, #8
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2190      	movs	r1, #144	; 0x90
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff73 	bl	8000d2e <read_register16>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d047      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	330a      	adds	r3, #10
 8000e52:	461a      	mov	r2, r3
 8000e54:	2192      	movs	r1, #146	; 0x92
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff69 	bl	8000d2e <read_register16>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d03d      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	330c      	adds	r3, #12
 8000e66:	461a      	mov	r2, r3
 8000e68:	2194      	movs	r1, #148	; 0x94
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff5f 	bl	8000d2e <read_register16>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d033      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	330e      	adds	r3, #14
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2196      	movs	r1, #150	; 0x96
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff55 	bl	8000d2e <read_register16>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d029      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2198      	movs	r1, #152	; 0x98
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff4b 	bl	8000d2e <read_register16>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d01f      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3312      	adds	r3, #18
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	219a      	movs	r1, #154	; 0x9a
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff41 	bl	8000d2e <read_register16>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d015      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	219c      	movs	r1, #156	; 0x9c
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff37 	bl	8000d2e <read_register16>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000eca:	461a      	mov	r2, r3
 8000ecc:	219e      	movs	r1, #158	; 0x9e
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff2d 	bl	8000d2e <read_register16>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <read_calibration_data+0xfa>

		return true;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <read_calibration_data+0xfc>
	}

	return false;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f103 0218 	add.w	r2, r3, #24
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	21a1      	movs	r1, #161	; 0xa1
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff4c 	bl	8000d98 <read_data>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d14b      	bne.n	8000f9e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	331a      	adds	r3, #26
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	21e1      	movs	r1, #225	; 0xe1
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff0d 	bl	8000d2e <read_register16>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d041      	beq.n	8000f9e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f103 021c 	add.w	r2, r3, #28
 8000f20:	2301      	movs	r3, #1
 8000f22:	21e3      	movs	r1, #227	; 0xe3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff37 	bl	8000d98 <read_data>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d136      	bne.n	8000f9e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000f30:	f107 030e 	add.w	r3, r7, #14
 8000f34:	461a      	mov	r2, r3
 8000f36:	21e4      	movs	r1, #228	; 0xe4
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fef8 	bl	8000d2e <read_register16>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02c      	beq.n	8000f9e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	461a      	mov	r2, r3
 8000f4a:	21e5      	movs	r1, #229	; 0xe5
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff feee 	bl	8000d2e <read_register16>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d022      	beq.n	8000f9e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000f5e:	2301      	movs	r3, #1
 8000f60:	21e7      	movs	r1, #231	; 0xe7
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff18 	bl	8000d98 <read_data>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d117      	bne.n	8000f9e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	121b      	asrs	r3, r3, #8
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	841a      	strh	r2, [r3, #32]

		return true;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]
	//SW_I2C_WriteControl_8Bit(dev->i2c, tx_buff, addr, &value)
	/*if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
		return false;
	else
		return true;*/
	SW_I2C_WriteControl_8Bit(SW_I2C1, tx_buff, addr, value);
 8000fc0:	89fb      	ldrh	r3, [r7, #14]
 8000fc2:	b2d9      	uxtb	r1, r3
 8000fc4:	78bb      	ldrb	r3, [r7, #2]
 8000fc6:	78fa      	ldrb	r2, [r7, #3]
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 ffbe 	bl	8001f4a <SW_I2C_WriteControl_8Bit>
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fe6:	2b76      	cmp	r3, #118	; 0x76
 8000fe8:	d005      	beq.n	8000ff6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fee:	2b77      	cmp	r3, #119	; 0x77
 8000ff0:	d001      	beq.n	8000ff6 <bmp280_init+0x1e>

		return false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e099      	b.n	800112a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fec9 	bl	8000d98 <read_data>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <bmp280_init+0x38>
		return false;
 800100c:	2300      	movs	r3, #0
 800100e:	e08c      	b.n	800112a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001016:	2b58      	cmp	r3, #88	; 0x58
 8001018:	d006      	beq.n	8001028 <bmp280_init+0x50>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001020:	2b60      	cmp	r3, #96	; 0x60
 8001022:	d001      	beq.n	8001028 <bmp280_init+0x50>

		return false;
 8001024:	2300      	movs	r3, #0
 8001026:	e080      	b.n	800112a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001028:	22b6      	movs	r2, #182	; 0xb6
 800102a:	21e0      	movs	r1, #224	; 0xe0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffbb 	bl	8000fa8 <write_register8>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <bmp280_init+0x64>
		return false;
 8001038:	2300      	movs	r3, #0
 800103a:	e076      	b.n	800112a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	2301      	movs	r3, #1
 8001042:	21f3      	movs	r1, #243	; 0xf3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fea7 	bl	8000d98 <read_data>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f5      	bne.n	800103c <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fec2 	bl	8000de4 <read_calibration_data>
 8001060:	4603      	mov	r3, r0
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d100      	bne.n	800106e <bmp280_init+0x96>
 800106c:	e001      	b.n	8001072 <bmp280_init+0x9a>
		return false;
 800106e:	2300      	movs	r3, #0
 8001070:	e05b      	b.n	800112a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001078:	2b60      	cmp	r3, #96	; 0x60
 800107a:	d10a      	bne.n	8001092 <bmp280_init+0xba>
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff33 	bl	8000ee8 <read_hum_calibration_data>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <bmp280_init+0xba>
		return false;
 800108e:	2300      	movs	r3, #0
 8001090:	e04b      	b.n	800112a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	795b      	ldrb	r3, [r3, #5]
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	b25a      	sxtb	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	461a      	mov	r2, r3
 80010ac:	21f5      	movs	r1, #245	; 0xf5
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff7a 	bl	8000fa8 <write_register8>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <bmp280_init+0xe6>
		return false;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e035      	b.n	800112a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d102      	bne.n	80010cc <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	78db      	ldrb	r3, [r3, #3]
 80010d0:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b25a      	sxtb	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80010ea:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80010f2:	2b60      	cmp	r3, #96	; 0x60
 80010f4:	d10d      	bne.n	8001112 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	791b      	ldrb	r3, [r3, #4]
 80010fa:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	461a      	mov	r2, r3
 8001100:	21f2      	movs	r1, #242	; 0xf2
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff50 	bl	8000fa8 <write_register8>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <bmp280_init+0x13a>
			return false;
 800110e:	2300      	movs	r3, #0
 8001110:	e00b      	b.n	800112a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	461a      	mov	r2, r3
 8001116:	21f4      	movs	r1, #244	; 0xf4
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff45 	bl	8000fa8 <write_register8>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <bmp280_init+0x150>
		return false;
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <bmp280_init+0x152>
	}

	return true;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001132:	b480      	push	{r7}
 8001134:	b087      	sub	sp, #28
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	10da      	asrs	r2, r3, #3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001150:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001154:	12db      	asrs	r3, r3, #11
 8001156:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	111b      	asrs	r3, r3, #4
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	8812      	ldrh	r2, [r2, #0]
 8001160:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	1112      	asrs	r2, r2, #4
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	8809      	ldrh	r1, [r1, #0]
 800116a:	1a52      	subs	r2, r2, r1
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001178:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800117c:	139b      	asrs	r3, r3, #14
 800117e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	441a      	add	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3380      	adds	r3, #128	; 0x80
 8001196:	121b      	asrs	r3, r3, #8
}
 8001198:	4618      	mov	r0, r3
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80011a2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a6:	b0cc      	sub	sp, #304	; 0x130
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80011ae:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80011b2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80011b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011ba:	17da      	asrs	r2, r3, #31
 80011bc:	461c      	mov	r4, r3
 80011be:	4615      	mov	r5, r2
 80011c0:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80011c4:	f145 3bff 	adc.w	fp, r5, #4294967295
 80011c8:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80011cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011d4:	fb03 f102 	mul.w	r1, r3, r2
 80011d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	18ca      	adds	r2, r1, r3
 80011e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011ea:	fba3 8903 	umull	r8, r9, r3, r3
 80011ee:	eb02 0309 	add.w	r3, r2, r9
 80011f2:	4699      	mov	r9, r3
 80011f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	17da      	asrs	r2, r3, #31
 8001200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001208:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800120c:	4603      	mov	r3, r0
 800120e:	fb03 f209 	mul.w	r2, r3, r9
 8001212:	460b      	mov	r3, r1
 8001214:	fb08 f303 	mul.w	r3, r8, r3
 8001218:	4413      	add	r3, r2
 800121a:	4602      	mov	r2, r0
 800121c:	fba8 2102 	umull	r2, r1, r8, r2
 8001220:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001224:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001228:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800122c:	4413      	add	r3, r2
 800122e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001232:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001236:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800123a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800123e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001242:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001246:	b21b      	sxth	r3, r3
 8001248:	17da      	asrs	r2, r3, #31
 800124a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800124e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001252:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001256:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800125a:	462a      	mov	r2, r5
 800125c:	fb02 f203 	mul.w	r2, r2, r3
 8001260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001264:	4621      	mov	r1, r4
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	441a      	add	r2, r3
 800126c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001270:	4621      	mov	r1, r4
 8001272:	fba3 3101 	umull	r3, r1, r3, r1
 8001276:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800127a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800127e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001282:	18d3      	adds	r3, r2, r3
 8001284:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001288:	f04f 0000 	mov.w	r0, #0
 800128c:	f04f 0100 	mov.w	r1, #0
 8001290:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001294:	462b      	mov	r3, r5
 8001296:	0459      	lsls	r1, r3, #17
 8001298:	4622      	mov	r2, r4
 800129a:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800129e:	4623      	mov	r3, r4
 80012a0:	0458      	lsls	r0, r3, #17
 80012a2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80012a6:	1814      	adds	r4, r2, r0
 80012a8:	643c      	str	r4, [r7, #64]	; 0x40
 80012aa:	414b      	adcs	r3, r1
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
 80012ae:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80012b2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80012b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	17da      	asrs	r2, r3, #31
 80012c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012c6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80012ca:	f04f 0000 	mov.w	r0, #0
 80012ce:	f04f 0100 	mov.w	r1, #0
 80012d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012d6:	00d9      	lsls	r1, r3, #3
 80012d8:	2000      	movs	r0, #0
 80012da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80012de:	1814      	adds	r4, r2, r0
 80012e0:	63bc      	str	r4, [r7, #56]	; 0x38
 80012e2:	414b      	adcs	r3, r1
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80012ea:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80012ee:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80012f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012f6:	fb03 f102 	mul.w	r1, r3, r2
 80012fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80012fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	18ca      	adds	r2, r1, r3
 8001308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800130c:	fba3 3103 	umull	r3, r1, r3, r3
 8001310:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001326:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800132a:	b21b      	sxth	r3, r3
 800132c:	17da      	asrs	r2, r3, #31
 800132e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001336:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800133a:	4622      	mov	r2, r4
 800133c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001340:	4641      	mov	r1, r8
 8001342:	fb01 f202 	mul.w	r2, r1, r2
 8001346:	464d      	mov	r5, r9
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	4603      	mov	r3, r0
 800134e:	fb03 f305 	mul.w	r3, r3, r5
 8001352:	4413      	add	r3, r2
 8001354:	4602      	mov	r2, r0
 8001356:	4641      	mov	r1, r8
 8001358:	fba2 2101 	umull	r2, r1, r2, r1
 800135c:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001360:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001364:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001368:	4413      	add	r3, r2
 800136a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800137a:	4623      	mov	r3, r4
 800137c:	0a18      	lsrs	r0, r3, #8
 800137e:	462a      	mov	r2, r5
 8001380:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001384:	462b      	mov	r3, r5
 8001386:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800138c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001390:	b21b      	sxth	r3, r3
 8001392:	17da      	asrs	r2, r3, #31
 8001394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001398:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800139c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013a0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80013a4:	464a      	mov	r2, r9
 80013a6:	fb02 f203 	mul.w	r2, r2, r3
 80013aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013ae:	4644      	mov	r4, r8
 80013b0:	fb04 f303 	mul.w	r3, r4, r3
 80013b4:	441a      	add	r2, r3
 80013b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013ba:	4644      	mov	r4, r8
 80013bc:	fba3 3404 	umull	r3, r4, r3, r4
 80013c0:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80013c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80013c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013cc:	18d3      	adds	r3, r2, r3
 80013ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80013de:	464c      	mov	r4, r9
 80013e0:	0323      	lsls	r3, r4, #12
 80013e2:	46c4      	mov	ip, r8
 80013e4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80013e8:	4644      	mov	r4, r8
 80013ea:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80013ec:	1884      	adds	r4, r0, r2
 80013ee:	633c      	str	r4, [r7, #48]	; 0x30
 80013f0:	eb41 0303 	adc.w	r3, r1, r3
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
 80013f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80013fa:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80013fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001402:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001406:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800140a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800140e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001412:	88db      	ldrh	r3, [r3, #6]
 8001414:	b29b      	uxth	r3, r3
 8001416:	2200      	movs	r2, #0
 8001418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800141c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001420:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001424:	4622      	mov	r2, r4
 8001426:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800142a:	4641      	mov	r1, r8
 800142c:	fb01 f202 	mul.w	r2, r1, r2
 8001430:	464d      	mov	r5, r9
 8001432:	4618      	mov	r0, r3
 8001434:	4621      	mov	r1, r4
 8001436:	4603      	mov	r3, r0
 8001438:	fb03 f305 	mul.w	r3, r3, r5
 800143c:	4413      	add	r3, r2
 800143e:	4602      	mov	r2, r0
 8001440:	4641      	mov	r1, r8
 8001442:	fba2 2101 	umull	r2, r1, r2, r1
 8001446:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800144a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800144e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001452:	4413      	add	r3, r2
 8001454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001464:	4629      	mov	r1, r5
 8001466:	104a      	asrs	r2, r1, #1
 8001468:	4629      	mov	r1, r5
 800146a:	17cb      	asrs	r3, r1, #31
 800146c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001470:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001474:	4313      	orrs	r3, r2
 8001476:	d101      	bne.n	800147c <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001478:	2300      	movs	r3, #0
 800147a:	e146      	b.n	800170a <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 800147c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001480:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001484:	17da      	asrs	r2, r3, #31
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
 8001488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800148a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800148e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001492:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001496:	105b      	asrs	r3, r3, #1
 8001498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800149c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80014a0:	07db      	lsls	r3, r3, #31
 80014a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80014ae:	4604      	mov	r4, r0
 80014b0:	1aa4      	subs	r4, r4, r2
 80014b2:	67bc      	str	r4, [r7, #120]	; 0x78
 80014b4:	eb61 0303 	sbc.w	r3, r1, r3
 80014b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014be:	4622      	mov	r2, r4
 80014c0:	462b      	mov	r3, r5
 80014c2:	1891      	adds	r1, r2, r2
 80014c4:	6239      	str	r1, [r7, #32]
 80014c6:	415b      	adcs	r3, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014ce:	4621      	mov	r1, r4
 80014d0:	1851      	adds	r1, r2, r1
 80014d2:	61b9      	str	r1, [r7, #24]
 80014d4:	4629      	mov	r1, r5
 80014d6:	414b      	adcs	r3, r1
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80014e6:	4649      	mov	r1, r9
 80014e8:	018b      	lsls	r3, r1, #6
 80014ea:	4641      	mov	r1, r8
 80014ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f0:	4641      	mov	r1, r8
 80014f2:	018a      	lsls	r2, r1, #6
 80014f4:	4641      	mov	r1, r8
 80014f6:	1889      	adds	r1, r1, r2
 80014f8:	6139      	str	r1, [r7, #16]
 80014fa:	4649      	mov	r1, r9
 80014fc:	eb43 0101 	adc.w	r1, r3, r1
 8001500:	6179      	str	r1, [r7, #20]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800150e:	4649      	mov	r1, r9
 8001510:	008b      	lsls	r3, r1, #2
 8001512:	46c4      	mov	ip, r8
 8001514:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001518:	4641      	mov	r1, r8
 800151a:	008a      	lsls	r2, r1, #2
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	4603      	mov	r3, r0
 8001522:	4622      	mov	r2, r4
 8001524:	189b      	adds	r3, r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	460b      	mov	r3, r1
 800152a:	462a      	mov	r2, r5
 800152c:	eb42 0303 	adc.w	r3, r2, r3
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800153e:	4649      	mov	r1, r9
 8001540:	008b      	lsls	r3, r1, #2
 8001542:	46c4      	mov	ip, r8
 8001544:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001548:	4641      	mov	r1, r8
 800154a:	008a      	lsls	r2, r1, #2
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	4603      	mov	r3, r0
 8001552:	4622      	mov	r2, r4
 8001554:	189b      	adds	r3, r3, r2
 8001556:	673b      	str	r3, [r7, #112]	; 0x70
 8001558:	462b      	mov	r3, r5
 800155a:	460a      	mov	r2, r1
 800155c:	eb42 0303 	adc.w	r3, r2, r3
 8001560:	677b      	str	r3, [r7, #116]	; 0x74
 8001562:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001566:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800156a:	f7ff fa09 	bl	8000980 <__aeabi_ldivmod>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800157a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	66bb      	str	r3, [r7, #104]	; 0x68
 8001584:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001586:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0b50      	lsrs	r0, r2, #13
 8001594:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001598:	1359      	asrs	r1, r3, #13
 800159a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800159e:	462b      	mov	r3, r5
 80015a0:	fb00 f203 	mul.w	r2, r0, r3
 80015a4:	4623      	mov	r3, r4
 80015a6:	fb03 f301 	mul.w	r3, r3, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	4622      	mov	r2, r4
 80015ae:	fba2 2100 	umull	r2, r1, r2, r0
 80015b2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80015b6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80015ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80015be:	4413      	add	r3, r2
 80015c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80015c4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015c8:	f04f 0000 	mov.w	r0, #0
 80015cc:	f04f 0100 	mov.w	r1, #0
 80015d0:	0b50      	lsrs	r0, r2, #13
 80015d2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015d6:	1359      	asrs	r1, r3, #13
 80015d8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80015dc:	462b      	mov	r3, r5
 80015de:	fb00 f203 	mul.w	r2, r0, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	fb03 f301 	mul.w	r3, r3, r1
 80015e8:	4413      	add	r3, r2
 80015ea:	4622      	mov	r2, r4
 80015ec:	fba2 2100 	umull	r2, r1, r2, r0
 80015f0:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80015f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80015f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80015fc:	4413      	add	r3, r2
 80015fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800160e:	4621      	mov	r1, r4
 8001610:	0e4a      	lsrs	r2, r1, #25
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	460c      	mov	r4, r1
 8001618:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800161c:	164b      	asrs	r3, r1, #25
 800161e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001626:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800162a:	b21b      	sxth	r3, r3
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	663b      	str	r3, [r7, #96]	; 0x60
 8001630:	667a      	str	r2, [r7, #100]	; 0x64
 8001632:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001636:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800163a:	462a      	mov	r2, r5
 800163c:	fb02 f203 	mul.w	r2, r2, r3
 8001640:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001644:	4621      	mov	r1, r4
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001650:	4621      	mov	r1, r4
 8001652:	fba2 2101 	umull	r2, r1, r2, r1
 8001656:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800165a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800165e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001662:	4413      	add	r3, r2
 8001664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001674:	4621      	mov	r1, r4
 8001676:	0cca      	lsrs	r2, r1, #19
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	460c      	mov	r4, r1
 800167e:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001682:	14cb      	asrs	r3, r1, #19
 8001684:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001688:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800168c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001690:	1884      	adds	r4, r0, r2
 8001692:	65bc      	str	r4, [r7, #88]	; 0x58
 8001694:	eb41 0303 	adc.w	r3, r1, r3
 8001698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800169a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800169e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80016a2:	4621      	mov	r1, r4
 80016a4:	1889      	adds	r1, r1, r2
 80016a6:	6539      	str	r1, [r7, #80]	; 0x50
 80016a8:	4629      	mov	r1, r5
 80016aa:	eb43 0101 	adc.w	r1, r3, r1
 80016ae:	6579      	str	r1, [r7, #84]	; 0x54
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016bc:	4623      	mov	r3, r4
 80016be:	0a18      	lsrs	r0, r3, #8
 80016c0:	462a      	mov	r2, r5
 80016c2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80016c6:	462b      	mov	r3, r5
 80016c8:	1219      	asrs	r1, r3, #8
 80016ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80016e6:	464c      	mov	r4, r9
 80016e8:	0123      	lsls	r3, r4, #4
 80016ea:	46c4      	mov	ip, r8
 80016ec:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80016f0:	4644      	mov	r4, r8
 80016f2:	0122      	lsls	r2, r4, #4
 80016f4:	1884      	adds	r4, r0, r2
 80016f6:	603c      	str	r4, [r7, #0]
 80016f8:	eb41 0303 	adc.w	r3, r1, r3
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001702:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001706:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800170a:	4618      	mov	r0, r3
 800170c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001716 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001716:	b480      	push	{r7}
 8001718:	b087      	sub	sp, #28
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001728:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	039a      	lsls	r2, r3, #14
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001734:	051b      	lsls	r3, r3, #20
 8001736:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800173e:	4619      	mov	r1, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800174c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001754:	4611      	mov	r1, r2
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	fb01 f202 	mul.w	r2, r1, r2
 800175c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	7f09      	ldrb	r1, [r1, #28]
 8001762:	4608      	mov	r0, r1
 8001764:	6979      	ldr	r1, [r7, #20]
 8001766:	fb00 f101 	mul.w	r1, r0, r1
 800176a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800176c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001770:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001774:	1292      	asrs	r2, r2, #10
 8001776:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800177a:	68f9      	ldr	r1, [r7, #12]
 800177c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001780:	fb01 f202 	mul.w	r2, r1, r2
 8001784:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001788:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	13db      	asrs	r3, r3, #15
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	13d2      	asrs	r2, r2, #15
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	7e12      	ldrb	r2, [r2, #24]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80017b4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80017bc:	bfa8      	it	ge
 80017be:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80017c2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	131b      	asrs	r3, r3, #12
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b08c      	sub	sp, #48	; 0x30
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017e6:	2b60      	cmp	r3, #96	; 0x60
 80017e8:	d007      	beq.n	80017fa <bmp280_read_fixed+0x28>
		if (humidity)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <bmp280_read_fixed+0x32>
 8001800:	2308      	movs	r3, #8
 8001802:	e000      	b.n	8001806 <bmp280_read_fixed+0x34>
 8001804:	2306      	movs	r3, #6
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f107 0218 	add.w	r2, r7, #24
 8001810:	21f7      	movs	r1, #247	; 0xf7
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fac0 	bl	8000d98 <read_data>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <bmp280_read_fixed+0x50>
		return false;
 800181e:	2300      	movs	r3, #0
 8001820:	e038      	b.n	8001894 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001822:	7e3b      	ldrb	r3, [r7, #24]
 8001824:	031a      	lsls	r2, r3, #12
 8001826:	7e7b      	ldrb	r3, [r7, #25]
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4313      	orrs	r3, r2
 800182c:	7eba      	ldrb	r2, [r7, #26]
 800182e:	0912      	lsrs	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	4313      	orrs	r3, r2
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001836:	7efb      	ldrb	r3, [r7, #27]
 8001838:	031a      	lsls	r2, r3, #12
 800183a:	7f3b      	ldrb	r3, [r7, #28]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4313      	orrs	r3, r2
 8001840:	7f7a      	ldrb	r2, [r7, #29]
 8001842:	0912      	lsrs	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	4313      	orrs	r3, r2
 8001848:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	461a      	mov	r2, r3
 8001850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fc6d 	bl	8001132 <compensate_temperature>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	461a      	mov	r2, r3
 8001862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff fc9c 	bl	80011a2 <compensate_pressure>
 800186a:	4602      	mov	r2, r0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00d      	beq.n	8001892 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001876:	7fbb      	ldrb	r3, [r7, #30]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	7ffa      	ldrb	r2, [r7, #31]
 800187c:	4313      	orrs	r3, r2
 800187e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	461a      	mov	r2, r3
 8001884:	6a39      	ldr	r1, [r7, #32]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff ff45 	bl	8001716 <compensate_humidity>
 800188c:	4602      	mov	r2, r0
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3730      	adds	r7, #48	; 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <bmp280_read_float+0x1a>
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	e000      	b.n	80018b8 <bmp280_read_float+0x1c>
 80018b6:	2300      	movs	r3, #0
 80018b8:	f107 0218 	add.w	r2, r7, #24
 80018bc:	f107 011c 	add.w	r1, r7, #28
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff ff86 	bl	80017d2 <bmp280_read_fixed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d02d      	beq.n	8001928 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe feb2 	bl	8000638 <__aeabi_i2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4917      	ldr	r1, [pc, #92]	; (8001934 <bmp280_read_float+0x98>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe ffb5 	bl	8000848 <__aeabi_fdiv>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fea1 	bl	8000630 <__aeabi_ui2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ffa7 	bl	8000848 <__aeabi_fdiv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00d      	beq.n	8001924 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe90 	bl	8000630 <__aeabi_ui2f>
 8001910:	4603      	mov	r3, r0
 8001912:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe ff96 	bl	8000848 <__aeabi_fdiv>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	601a      	str	r2, [r3, #0]
		return true;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <bmp280_read_float+0x8e>
	}

	return false;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	42c80000 	.word	0x42c80000

08001938 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_GPIO_Init+0xa8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <MX_GPIO_Init+0xa8>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_GPIO_Init+0xa8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_GPIO_Init+0xa8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <MX_GPIO_Init+0xa8>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_GPIO_Init+0xa8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_GPIO_Init+0xa8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <MX_GPIO_Init+0xa8>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_GPIO_Init+0xa8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_GPIO_Init+0xa8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <MX_GPIO_Init+0xa8>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_GPIO_Init+0xa8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_GPIO_Init+0xac>)
 80019b4:	f001 f8f3 	bl	8002b9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	4619      	mov	r1, r3
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_GPIO_Init+0xac>)
 80019d2:	f000 ff49 	bl	8002868 <HAL_GPIO_Init>

}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40011000 	.word	0x40011000

080019e8 <TIMER__Wait_us>:
	#define FALSE 0
#endif


void TIMER__Wait_us(__IO uint32_t nCount)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    for (; nCount != 0;nCount--);
 80019f0:	e002      	b.n	80019f8 <TIMER__Wait_us+0x10>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <TIMER__Wait_us+0xa>
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
	...

08001a0c <SW_I2C_initial>:


void SW_I2C_initial(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef			GPIO_InitStructure;

	GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode=GPIO_MODE_AF_OD;
 8001a16:	2312      	movs	r3, #18
 8001a18:	607b      	str	r3, [r7, #4]
	
	GPIO_InitStructure.Pin   = GPIO_SW_I2C1_SCL_PIN;
 8001a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIO_SW_I2C1_SCL, &GPIO_InitStructure);
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <SW_I2C_initial+0x38>)
 8001a26:	f000 ff1f 	bl	8002868 <HAL_GPIO_Init>
	GPIO_InitStructure.Pin   = GPIO_SW_I2C1_SDA_PIN;
 8001a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a2e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(GPIO_SW_I2C1_SDA, &GPIO_InitStructure);
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <SW_I2C_initial+0x38>)
 8001a36:	f000 ff17 	bl	8002868 <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40010c00 	.word	0x40010c00

08001a48 <GPIO_SetBits>:

void GPIO_SetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_SET);
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f001 f89f 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_RESET);
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	2200      	movs	r2, #0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f001 f88f 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <GPIO_ReadInputDataBit>:

uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
	uint8_t Ret;
	Ret=(uint16_t)HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f001 f869 	bl	8002b70 <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
	return Ret;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <sda_high>:
	
void sda_high(uint8_t sel)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d104      	bne.n	8001ac6 <sda_high+0x1a>
        GPIO_SetBits(SW_I2C1_SDA_GPIO, SW_I2C1_SDA_PIN);
 8001abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <sda_high+0x24>)
 8001ac2:	f7ff ffc1 	bl	8001a48 <GPIO_SetBits>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <sda_low>:
void sda_low(uint8_t sel)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d104      	bne.n	8001aee <sda_low+0x1a>
        GPIO_ResetBits(SW_I2C1_SDA_GPIO, SW_I2C1_SDA_PIN);
 8001ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <sda_low+0x24>)
 8001aea:	f7ff ffbd 	bl	8001a68 <GPIO_ResetBits>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40010c00 	.word	0x40010c00

08001afc <scl_high>:
void scl_high(uint8_t sel)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d104      	bne.n	8001b16 <scl_high+0x1a>
        GPIO_SetBits(SW_I2C1_SCL_GPIO, SW_I2C1_SCL_PIN);
 8001b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <scl_high+0x24>)
 8001b12:	f7ff ff99 	bl	8001a48 <GPIO_SetBits>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40010c00 	.word	0x40010c00

08001b24 <scl_low>:
void scl_low(uint8_t sel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d104      	bne.n	8001b3e <scl_low+0x1a>
        GPIO_ResetBits(SW_I2C1_SCL_GPIO, SW_I2C1_SCL_PIN);
 8001b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <scl_low+0x24>)
 8001b3a:	f7ff ff95 	bl	8001a68 <GPIO_ResetBits>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <sda_out>:
void sda_out(uint8_t sel, uint8_t out)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	460a      	mov	r2, r1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71bb      	strb	r3, [r7, #6]
    if (out)
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <sda_out+0x20>
    {
        sda_high(sel);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffa1 	bl	8001aac <sda_high>
    }
    else
    {
        sda_low(sel);
    }
}
 8001b6a:	e003      	b.n	8001b74 <sda_out+0x28>
        sda_low(sel);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ffb0 	bl	8001ad4 <sda_low>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <sda_in_mode>:

void sda_in_mode(uint8_t sel)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Mode=GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
		
    if(sel == 1)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d108      	bne.n	8001ba6 <sda_in_mode+0x2a>
    {
        GPIO_InitStructure.Pin   = SW_I2C1_SDA_PIN;
 8001b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b98:	60bb      	str	r3, [r7, #8]
        HAL_GPIO_Init(SW_I2C1_SDA_GPIO, &GPIO_InitStructure);
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <sda_in_mode+0x34>)
 8001ba2:	f000 fe61 	bl	8002868 <HAL_GPIO_Init>
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40010c00 	.word	0x40010c00

08001bb4 <sda_out_mode>:

void sda_out_mode(uint8_t sel)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStructure;
	
		GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_OD;
 8001bc2:	2311      	movs	r3, #17
 8001bc4:	60fb      	str	r3, [r7, #12]
		
    if(sel == 1)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <sda_out_mode+0x2a>
    {
        GPIO_InitStructure.Pin   = SW_I2C1_SDA_PIN;
 8001bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd0:	60bb      	str	r3, [r7, #8]
        HAL_GPIO_Init(SW_I2C1_SDA_GPIO, &GPIO_InitStructure);
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <sda_out_mode+0x34>)
 8001bda:	f000 fe45 	bl	8002868 <HAL_GPIO_Init>
    }
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40010c00 	.word	0x40010c00

08001bec <i2c_clk_data_out>:
        HAL_GPIO_Init(SW_I2C1_SCL_GPIO, &GPIO_InitStructure);
    }
}

void i2c_clk_data_out(uint8_t sel)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
    scl_high(sel);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff7f 	bl	8001afc <scl_high>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f7ff fef1 	bl	80019e8 <TIMER__Wait_us>
    scl_low(sel);
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff8b 	bl	8001b24 <scl_low>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <i2c_port_initial>:

void i2c_port_initial(uint8_t sel)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
    sda_high(sel);
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff42 	bl	8001aac <sda_high>
    scl_high(sel);
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff66 	bl	8001afc <scl_high>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <i2c_start_condition>:

void i2c_start_condition(uint8_t sel)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
    sda_high(sel);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff31 	bl	8001aac <sda_high>
    scl_high(sel);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff55 	bl	8001afc <scl_high>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c56:	f7ff fec7 	bl	80019e8 <TIMER__Wait_us>
    sda_low(sel);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff39 	bl	8001ad4 <sda_low>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c66:	f7ff febf 	bl	80019e8 <TIMER__Wait_us>
    scl_low(sel);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff59 	bl	8001b24 <scl_low>

    TIMER__Wait_us(SW_I2C_WAIT_TIME << 1);
 8001c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c76:	f7ff feb7 	bl	80019e8 <TIMER__Wait_us>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <i2c_stop_condition>:

void i2c_stop_condition(uint8_t sel)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
    sda_low(sel);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff20 	bl	8001ad4 <sda_low>
    scl_high(sel);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff30 	bl	8001afc <scl_high>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca0:	f7ff fea2 	bl	80019e8 <TIMER__Wait_us>
    sda_high(sel);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff00 	bl	8001aac <sda_high>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb0:	f7ff fe9a 	bl	80019e8 <TIMER__Wait_us>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <i2c_check_ack>:

uint8_t i2c_check_ack(uint8_t sel)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
    uint8_t         ack;
    int             i;
    unsigned int    temp;

    sda_in_mode(sel);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff57 	bl	8001b7c <sda_in_mode>

    scl_high(sel);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff13 	bl	8001afc <scl_high>

    ack = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cde:	f7ff fe83 	bl	80019e8 <TIMER__Wait_us>

    for (i = 10; i > 0; i--)
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e013      	b.n	8001d10 <i2c_check_ack+0x54>
    {
        temp = !(SW_I2C_ReadVal_SDA(sel));	
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f8ac 	bl	8001e48 <SW_I2C_ReadVal_SDA>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	60fb      	str	r3, [r7, #12]
        if (temp)	
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <i2c_check_ack+0x4e>
        {
            ack = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	75fb      	strb	r3, [r7, #23]
            break;
 8001d08:	e005      	b.n	8001d16 <i2c_check_ack+0x5a>
    for (i = 10; i > 0; i--)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dce8      	bgt.n	8001ce8 <i2c_check_ack+0x2c>
        }
    }
    scl_low(sel);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff03 	bl	8001b24 <scl_low>
    sda_out_mode(sel);	
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff47 	bl	8001bb4 <sda_out_mode>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d2a:	f7ff fe5d 	bl	80019e8 <TIMER__Wait_us>
    return ack;
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <i2c_check_not_ack>:

void i2c_check_not_ack(uint8_t sel)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
    sda_in_mode(sel);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff19 	bl	8001b7c <sda_in_mode>
    i2c_clk_data_out(sel);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff4d 	bl	8001bec <i2c_clk_data_out>
    sda_out_mode(sel);
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff2d 	bl	8001bb4 <sda_out_mode>
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5e:	f7ff fe43 	bl	80019e8 <TIMER__Wait_us>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <i2c_slave_address>:

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
}

void i2c_slave_address(uint8_t sel, uint8_t IICID, uint8_t readwrite)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	460b      	mov	r3, r1
 8001d76:	71bb      	strb	r3, [r7, #6]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	717b      	strb	r3, [r7, #5]
    int x;

    if (readwrite)
 8001d7c:	797b      	ldrb	r3, [r7, #5]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <i2c_slave_address+0x22>
    {
        IICID |= I2C_READ;
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	71bb      	strb	r3, [r7, #6]
 8001d8a:	e003      	b.n	8001d94 <i2c_slave_address+0x2a>
    }
    else
    {
        IICID &= ~I2C_READ;
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	71bb      	strb	r3, [r7, #6]
    }

    scl_low(sel);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fec4 	bl	8001b24 <scl_low>

    for (x = 7; x >= 0; x--)
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e019      	b.n	8001dd6 <i2c_slave_address+0x6c>
    {
        sda_out(sel, IICID & (1 << x));
 8001da2:	2201      	movs	r2, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001db0:	4013      	ands	r3, r2
 8001db2:	b25b      	sxtb	r3, r3
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fec6 	bl	8001b4c <sda_out>
        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc4:	f7ff fe10 	bl	80019e8 <TIMER__Wait_us>
        i2c_clk_data_out(sel);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff0e 	bl	8001bec <i2c_clk_data_out>
    for (x = 7; x >= 0; x--)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dae2      	bge.n	8001da2 <i2c_slave_address+0x38>

    }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <i2c_register_address>:

void i2c_register_address(uint8_t sel, uint8_t addr)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	460a      	mov	r2, r1
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	4613      	mov	r3, r2
 8001df4:	71bb      	strb	r3, [r7, #6]
    int  x;

    scl_low(sel);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fe93 	bl	8001b24 <scl_low>

    for (x = 7; x >= 0; x--)
 8001dfe:	2307      	movs	r3, #7
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e019      	b.n	8001e38 <i2c_register_address+0x52>
    {
        sda_out(sel, addr & (1 << x));
 8001e04:	2201      	movs	r2, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	b25a      	sxtb	r2, r3
 8001e0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e12:	4013      	ands	r3, r2
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fe95 	bl	8001b4c <sda_out>
        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e26:	f7ff fddf 	bl	80019e8 <TIMER__Wait_us>
        i2c_clk_data_out(sel);
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fedd 	bl	8001bec <i2c_clk_data_out>
    for (x = 7; x >= 0; x--)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	dae2      	bge.n	8001e04 <i2c_register_address+0x1e>

    }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <SW_I2C_ReadVal_SDA>:
    TIMER__Wait_us(SW_I2C_WAIT_TIME);
}


uint8_t SW_I2C_ReadVal_SDA(uint8_t sel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
    if(sel == 1)
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <SW_I2C_ReadVal_SDA+0x1e>
        return GPIO_ReadInputDataBit(SW_I2C1_SDA_GPIO, SW_I2C1_SDA_PIN);
 8001e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <SW_I2C_ReadVal_SDA+0x28>)
 8001e5e:	f7ff fe13 	bl	8001a88 <GPIO_ReadInputDataBit>
 8001e62:	4603      	mov	r3, r0
 8001e64:	e000      	b.n	8001e68 <SW_I2C_ReadVal_SDA+0x20>
		return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010c00 	.word	0x40010c00

08001e74 <SW_I2C_Write_Data>:

    return 0;
}

void SW_I2C_Write_Data(uint8_t sel, uint8_t data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71bb      	strb	r3, [r7, #6]
    int  x;

    scl_low(sel);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe4c 	bl	8001b24 <scl_low>

    for (x = 7; x >= 0; x--)
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e019      	b.n	8001ec6 <SW_I2C_Write_Data+0x52>
    {
        sda_out(sel, data & (1 << x));
 8001e92:	2201      	movs	r2, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe4e 	bl	8001b4c <sda_out>
        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb4:	f7ff fd98 	bl	80019e8 <TIMER__Wait_us>
        i2c_clk_data_out(sel);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fe96 	bl	8001bec <i2c_clk_data_out>
    for (x = 7; x >= 0; x--)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	dae2      	bge.n	8001e92 <SW_I2C_Write_Data+0x1e>

    }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <SW_I2C_Read_Data>:

uint8_t SW_I2C_Read_Data(uint8_t sel)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
    int      x;
    uint8_t  readdata = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	72fb      	strb	r3, [r7, #11]

    sda_in_mode(sel);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe48 	bl	8001b7c <sda_in_mode>

    for (x = 8; x--;)
 8001eec:	2308      	movs	r3, #8
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e01d      	b.n	8001f2e <SW_I2C_Read_Data+0x58>
    {
        scl_high(sel);
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fe01 	bl	8001afc <scl_high>

        readdata <<= 1;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	72fb      	strb	r3, [r7, #11]
        if (SW_I2C_ReadVal_SDA(sel))
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffa0 	bl	8001e48 <SW_I2C_ReadVal_SDA>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <SW_I2C_Read_Data+0x40>
            readdata |= 0x01;
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	72fb      	strb	r3, [r7, #11]

        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1a:	f7ff fd65 	bl	80019e8 <TIMER__Wait_us>
        scl_low(sel);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fdff 	bl	8001b24 <scl_low>

        TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f7ff fd5d 	bl	80019e8 <TIMER__Wait_us>
    for (x = 8; x--;)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1dc      	bne.n	8001ef2 <SW_I2C_Read_Data+0x1c>
    }

    sda_out_mode(sel);
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fe3a 	bl	8001bb4 <sda_out_mode>
    return readdata;
 8001f40:	7afb      	ldrb	r3, [r7, #11]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <SW_I2C_WriteControl_8Bit>:

uint8_t SW_I2C_WriteControl_8Bit(uint8_t sel, uint8_t IICID, uint8_t regaddr, uint8_t data)
{
 8001f4a:	b590      	push	{r4, r7, lr}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4604      	mov	r4, r0
 8001f52:	4608      	mov	r0, r1
 8001f54:	4611      	mov	r1, r2
 8001f56:	461a      	mov	r2, r3
 8001f58:	4623      	mov	r3, r4
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71bb      	strb	r3, [r7, #6]
 8001f60:	460b      	mov	r3, r1
 8001f62:	717b      	strb	r3, [r7, #5]
 8001f64:	4613      	mov	r3, r2
 8001f66:	713b      	strb	r3, [r7, #4]
    uint8_t   returnack = TRUE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]

    i2c_start_condition(sel);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe62 	bl	8001c38 <i2c_start_condition>

    i2c_slave_address(sel, IICID, WRITE_CMD);
 8001f74:	79b9      	ldrb	r1, [r7, #6]
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fef5 	bl	8001d6a <i2c_slave_address>
    if (!i2c_check_ack(sel))
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe9a 	bl	8001cbc <i2c_check_ack>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <SW_I2C_WriteControl_8Bit+0x48>
    {
        returnack = FALSE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
    }

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f96:	f7ff fd27 	bl	80019e8 <TIMER__Wait_us>

    i2c_register_address(sel, regaddr);
 8001f9a:	797a      	ldrb	r2, [r7, #5]
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff20 	bl	8001de6 <i2c_register_address>
    if (!i2c_check_ack(sel))
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe87 	bl	8001cbc <i2c_check_ack>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <SW_I2C_WriteControl_8Bit+0x6e>
    {
        returnack = FALSE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
    }

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fbc:	f7ff fd14 	bl	80019e8 <TIMER__Wait_us>

    SW_I2C_Write_Data(sel, data);
 8001fc0:	793a      	ldrb	r2, [r7, #4]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff54 	bl	8001e74 <SW_I2C_Write_Data>
    if (!i2c_check_ack(sel))
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe74 	bl	8001cbc <i2c_check_ack>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <SW_I2C_WriteControl_8Bit+0x94>
    {
        returnack = FALSE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
    }

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8001fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe2:	f7ff fd01 	bl	80019e8 <TIMER__Wait_us>

    i2c_stop_condition(sel);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe4a 	bl	8001c82 <i2c_stop_condition>

    return returnack;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <SW_I2C_ReadControl_8Bit_OnlyData>:

    return returnack;
}

uint8_t SW_I2C_ReadControl_8Bit_OnlyData(uint8_t sel, uint8_t IICID)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	460a      	mov	r2, r1
 8002002:	71fb      	strb	r3, [r7, #7]
 8002004:	4613      	mov	r3, r2
 8002006:	71bb      	strb	r3, [r7, #6]
    uint8_t  readdata = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]

    i2c_port_initial(sel);
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fe01 	bl	8001c16 <i2c_port_initial>

    i2c_start_condition(sel);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fe0e 	bl	8001c38 <i2c_start_condition>

    i2c_slave_address(sel, IICID, READ_CMD);
 800201c:	79b9      	ldrb	r1, [r7, #6]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	2201      	movs	r2, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fea1 	bl	8001d6a <i2c_slave_address>
    i2c_check_ack(sel);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fe46 	bl	8001cbc <i2c_check_ack>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 8002030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002034:	f7ff fcd8 	bl	80019e8 <TIMER__Wait_us>

    readdata = SW_I2C_Read_Data(sel);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff4b 	bl	8001ed6 <SW_I2C_Read_Data>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]

    i2c_check_not_ack(sel);
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe76 	bl	8001d38 <i2c_check_not_ack>

    i2c_stop_condition(sel);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fe17 	bl	8001c82 <i2c_stop_condition>

    return readdata;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <SW_I2C_ReadControl_8Bit>:

    return readdata;
}

uint8_t SW_I2C_ReadControl_8Bit(uint8_t sel, uint8_t IICID, uint8_t regaddr)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	460b      	mov	r3, r1
 800206a:	71bb      	strb	r3, [r7, #6]
 800206c:	4613      	mov	r3, r2
 800206e:	717b      	strb	r3, [r7, #5]
    uint8_t  readdata = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

    i2c_port_initial(sel);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fdcd 	bl	8001c16 <i2c_port_initial>

    i2c_start_condition(sel);
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fdda 	bl	8001c38 <i2c_start_condition>

    i2c_slave_address(sel, IICID, WRITE_CMD);
 8002084:	79b9      	ldrb	r1, [r7, #6]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2200      	movs	r2, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe6d 	bl	8001d6a <i2c_slave_address>
    i2c_check_ack(sel);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe12 	bl	8001cbc <i2c_check_ack>

    i2c_register_address(sel, regaddr);
 8002098:	797a      	ldrb	r2, [r7, #5]
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fea1 	bl	8001de6 <i2c_register_address>
    i2c_check_ack(sel);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fe08 	bl	8001cbc <i2c_check_ack>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80020ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b0:	f7ff fc9a 	bl	80019e8 <TIMER__Wait_us>

    i2c_start_condition(sel);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fdbe 	bl	8001c38 <i2c_start_condition>

    i2c_slave_address(sel, IICID, READ_CMD);
 80020bc:	79b9      	ldrb	r1, [r7, #6]
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fe51 	bl	8001d6a <i2c_slave_address>
    i2c_check_ack(sel);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fdf6 	bl	8001cbc <i2c_check_ack>

    TIMER__Wait_us(SW_I2C_WAIT_TIME);
 80020d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d4:	f7ff fc88 	bl	80019e8 <TIMER__Wait_us>

    readdata = SW_I2C_Read_Data(sel);
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fefb 	bl	8001ed6 <SW_I2C_Read_Data>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

    i2c_check_not_ack(sel);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fe26 	bl	8001d38 <i2c_check_not_ack>

    i2c_stop_condition(sel);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fdc7 	bl	8001c82 <i2c_stop_condition>

    return readdata;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002106:	f000 fa45 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210a:	f000 f8e1 	bl	80022d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210e:	f7ff fc13 	bl	8001938 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002112:	f000 f9a3 	bl	800245c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SW_I2C_initial();
 8002116:	f7ff fc79 	bl	8001a0c <SW_I2C_initial>
  i2c_port_initial(SW_I2C1);
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff fd7b 	bl	8001c16 <i2c_port_initial>

  	bmp280_init_default_params(&bmp280.params);
 8002120:	485b      	ldr	r0, [pc, #364]	; (8002290 <main+0x190>)
 8002122:	f7fe fde9 	bl	8000cf8 <bmp280_init_default_params>
  	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <main+0x194>)
 8002128:	2276      	movs	r2, #118	; 0x76
 800212a:	849a      	strh	r2, [r3, #36]	; 0x24



  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800212c:	e013      	b.n	8002156 <main+0x56>
  			size = sprintf((char *)Data, "BMP280 initialization failed\n");
 800212e:	495a      	ldr	r1, [pc, #360]	; (8002298 <main+0x198>)
 8002130:	485a      	ldr	r0, [pc, #360]	; (800229c <main+0x19c>)
 8002132:	f001 fb51 	bl	80037d8 <siprintf>
 8002136:	4603      	mov	r3, r0
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <main+0x1a0>)
 800213c:	801a      	strh	r2, [r3, #0]
  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <main+0x1a0>)
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	4955      	ldr	r1, [pc, #340]	; (800229c <main+0x19c>)
 8002148:	4856      	ldr	r0, [pc, #344]	; (80022a4 <main+0x1a4>)
 800214a:	f001 f9a8 	bl	800349e <HAL_UART_Transmit>
  			HAL_Delay(2000);
 800214e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002152:	f000 fa81 	bl	8002658 <HAL_Delay>
  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002156:	494e      	ldr	r1, [pc, #312]	; (8002290 <main+0x190>)
 8002158:	484e      	ldr	r0, [pc, #312]	; (8002294 <main+0x194>)
 800215a:	f7fe ff3d 	bl	8000fd8 <bmp280_init>
 800215e:	4603      	mov	r3, r0
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e1      	bne.n	800212e <main+0x2e>
  		}
  		bool bme280p = bmp280.id == BME280_CHIP_ID;
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <main+0x194>)
 800216c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002170:	2b60      	cmp	r3, #96	; 0x60
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	71fb      	strb	r3, [r7, #7]
  		size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <main+0x84>
 8002180:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <main+0x1a8>)
 8002182:	e000      	b.n	8002186 <main+0x86>
 8002184:	4b49      	ldr	r3, [pc, #292]	; (80022ac <main+0x1ac>)
 8002186:	461a      	mov	r2, r3
 8002188:	4949      	ldr	r1, [pc, #292]	; (80022b0 <main+0x1b0>)
 800218a:	4844      	ldr	r0, [pc, #272]	; (800229c <main+0x19c>)
 800218c:	f001 fb24 	bl	80037d8 <siprintf>
 8002190:	4603      	mov	r3, r0
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <main+0x1a0>)
 8002196:	801a      	strh	r2, [r3, #0]
  		HAL_UART_Transmit(&huart1, Data, size, 1000);
 8002198:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <main+0x1a0>)
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a0:	493e      	ldr	r1, [pc, #248]	; (800229c <main+0x19c>)
 80021a2:	4840      	ldr	r0, [pc, #256]	; (80022a4 <main+0x1a4>)
 80021a4:	f001 f97b 	bl	800349e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80021a8:	e013      	b.n	80021d2 <main+0xd2>
	  			size = sprintf((char *)Data,
 80021aa:	4942      	ldr	r1, [pc, #264]	; (80022b4 <main+0x1b4>)
 80021ac:	483b      	ldr	r0, [pc, #236]	; (800229c <main+0x19c>)
 80021ae:	f001 fb13 	bl	80037d8 <siprintf>
 80021b2:	4603      	mov	r3, r0
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <main+0x1a0>)
 80021b8:	801a      	strh	r2, [r3, #0]
	  					"Temperature/pressure reading failed\n");
	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <main+0x1a0>)
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	4936      	ldr	r1, [pc, #216]	; (800229c <main+0x19c>)
 80021c4:	4837      	ldr	r0, [pc, #220]	; (80022a4 <main+0x1a4>)
 80021c6:	f001 f96a 	bl	800349e <HAL_UART_Transmit>
	  			HAL_Delay(2000);
 80021ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021ce:	f000 fa43 	bl	8002658 <HAL_Delay>
	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <main+0x1b8>)
 80021d4:	4a39      	ldr	r2, [pc, #228]	; (80022bc <main+0x1bc>)
 80021d6:	493a      	ldr	r1, [pc, #232]	; (80022c0 <main+0x1c0>)
 80021d8:	482e      	ldr	r0, [pc, #184]	; (8002294 <main+0x194>)
 80021da:	f7ff fb5f 	bl	800189c <bmp280_read_float>
 80021de:	4603      	mov	r3, r0
 80021e0:	f083 0301 	eor.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1df      	bne.n	80021aa <main+0xaa>
	  		}

	  		size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C",
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <main+0x1bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f910 	bl	8000414 <__aeabi_f2d>
 80021f4:	4604      	mov	r4, r0
 80021f6:	460d      	mov	r5, r1
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <main+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f909 	bl	8000414 <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	e9cd 2300 	strd	r2, r3, [sp]
 800220a:	4622      	mov	r2, r4
 800220c:	462b      	mov	r3, r5
 800220e:	492d      	ldr	r1, [pc, #180]	; (80022c4 <main+0x1c4>)
 8002210:	4822      	ldr	r0, [pc, #136]	; (800229c <main+0x19c>)
 8002212:	f001 fae1 	bl	80037d8 <siprintf>
 8002216:	4603      	mov	r3, r0
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <main+0x1a0>)
 800221c:	801a      	strh	r2, [r3, #0]
	  				pressure, temperature);
	  		HAL_UART_Transmit(&huart1, Data, size, 1000);
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <main+0x1a0>)
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	491d      	ldr	r1, [pc, #116]	; (800229c <main+0x19c>)
 8002228:	481e      	ldr	r0, [pc, #120]	; (80022a4 <main+0x1a4>)
 800222a:	f001 f938 	bl	800349e <HAL_UART_Transmit>
	  		if (bme280p) {
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d017      	beq.n	8002264 <main+0x164>
	  			size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <main+0x1b8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f8eb 	bl	8000414 <__aeabi_f2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4921      	ldr	r1, [pc, #132]	; (80022c8 <main+0x1c8>)
 8002244:	4815      	ldr	r0, [pc, #84]	; (800229c <main+0x19c>)
 8002246:	f001 fac7 	bl	80037d8 <siprintf>
 800224a:	4603      	mov	r3, r0
 800224c:	b29a      	uxth	r2, r3
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <main+0x1a0>)
 8002250:	801a      	strh	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <main+0x1a0>)
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	4910      	ldr	r1, [pc, #64]	; (800229c <main+0x19c>)
 800225c:	4811      	ldr	r0, [pc, #68]	; (80022a4 <main+0x1a4>)
 800225e:	f001 f91e 	bl	800349e <HAL_UART_Transmit>
 8002262:	e00f      	b.n	8002284 <main+0x184>
	  		}

	  		else {
	  			size = sprintf((char *)Data, "\n");
 8002264:	4919      	ldr	r1, [pc, #100]	; (80022cc <main+0x1cc>)
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <main+0x19c>)
 8002268:	f001 fab6 	bl	80037d8 <siprintf>
 800226c:	4603      	mov	r3, r0
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <main+0x1a0>)
 8002272:	801a      	strh	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <main+0x1a0>)
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <main+0x19c>)
 800227e:	4809      	ldr	r0, [pc, #36]	; (80022a4 <main+0x1a4>)
 8002280:	f001 f90d 	bl	800349e <HAL_UART_Transmit>
	  		}
	  		HAL_Delay(2000);
 8002284:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002288:	f000 f9e6 	bl	8002658 <HAL_Delay>
	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800228c:	e7a1      	b.n	80021d2 <main+0xd2>
 800228e:	bf00      	nop
 8002290:	200000b8 	.word	0x200000b8
 8002294:	2000008c 	.word	0x2000008c
 8002298:	080040e4 	.word	0x080040e4
 800229c:	200000d0 	.word	0x200000d0
 80022a0:	200000cc 	.word	0x200000cc
 80022a4:	200001d4 	.word	0x200001d4
 80022a8:	08004104 	.word	0x08004104
 80022ac:	0800410c 	.word	0x0800410c
 80022b0:	08004114 	.word	0x08004114
 80022b4:	08004128 	.word	0x08004128
 80022b8:	200000c8 	.word	0x200000c8
 80022bc:	200000c0 	.word	0x200000c0
 80022c0:	200000c4 	.word	0x200000c4
 80022c4:	08004150 	.word	0x08004150
 80022c8:	08004178 	.word	0x08004178
 80022cc:	0800418c 	.word	0x0800418c

080022d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b090      	sub	sp, #64	; 0x40
 80022d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022d6:	f107 0318 	add.w	r3, r7, #24
 80022da:	2228      	movs	r2, #40	; 0x28
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fa72 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f6:	2301      	movs	r3, #1
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fa:	2310      	movs	r3, #16
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fc62 	bl	8002bd0 <HAL_RCC_OscConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002312:	f000 f818 	bl	8002346 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002316:	230f      	movs	r3, #15
 8002318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fed0 	bl	80030d4 <HAL_RCC_ClockConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800233a:	f000 f804 	bl	8002346 <Error_Handler>
  }
}
 800233e:	bf00      	nop
 8002340:	3740      	adds	r7, #64	; 0x40
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234a:	b672      	cpsid	i
}
 800234c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234e:	e7fe      	b.n	800234e <Error_Handler+0x8>

08002350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_MspInit+0x40>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_MspInit+0x40>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6193      	str	r3, [r2, #24]
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_MspInit+0x40>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_MspInit+0x40>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_MspInit+0x40>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_MspInit+0x40>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023da:	f000 f921 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f001 f9ae 	bl	8003774 <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20005000 	.word	0x20005000
 8002444:	00000400 	.word	0x00000400
 8002448:	200001d0 	.word	0x200001d0
 800244c:	20000230 	.word	0x20000230

08002450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART1_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002494:	f000 ffb6 	bl	8003404 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f7ff ff52 	bl	8002346 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200001d4 	.word	0x200001d4
 80024ac:	40013800 	.word	0x40013800

080024b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_UART_MspInit+0x8c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d131      	bne.n	8002534 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0x90>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_UART_MspInit+0x90>)
 80024d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_MspInit+0x90>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_UART_MspInit+0x90>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_UART_MspInit+0x90>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_UART_MspInit+0x90>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4619      	mov	r1, r3
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <HAL_UART_MspInit+0x94>)
 8002516:	f000 f9a7 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800251a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800251e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4619      	mov	r1, r3
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <HAL_UART_MspInit+0x94>)
 8002530:	f000 f99a 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002534:	bf00      	nop
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40013800 	.word	0x40013800
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800

08002548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800256e:	f7ff ff6f 	bl	8002450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f001 f905 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002576:	f7ff fdc3 	bl	8002100 <main>
  bx lr
 800257a:	4770      	bx	lr
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002584:	080041fc 	.word	0x080041fc
  ldr r2, =_sbss
 8002588:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800258c:	2000022c 	.word	0x2000022c

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_Init+0x28>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_Init+0x28>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 f92b 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025aa:	200f      	movs	r0, #15
 80025ac:	f000 f808 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b0:	f7ff fece 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40022000 	.word	0x40022000

080025c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x54>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f935 	bl	800284e <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 f90b 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x5c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000000 	.word	0x20000000
 8002618:	20000008 	.word	0x20000008
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x1c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_IncTick+0x20>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_IncTick+0x20>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000008 	.word	0x20000008
 8002640:	20000218 	.word	0x20000218

08002644 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <HAL_GetTick+0x10>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	20000218 	.word	0x20000218

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fff0 	bl	8002644 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffe0 	bl	8002644 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff90 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff49 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff5e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff90 	bl	8002758 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5f 	bl	8002704 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffb0 	bl	80027bc <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b08b      	sub	sp, #44	; 0x2c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	e169      	b.n	8002b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800287c:	2201      	movs	r2, #1
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8158 	bne.w	8002b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a9a      	ldr	r2, [pc, #616]	; (8002b08 <HAL_GPIO_Init+0x2a0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d05e      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028a4:	4a98      	ldr	r2, [pc, #608]	; (8002b08 <HAL_GPIO_Init+0x2a0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d875      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028aa:	4a98      	ldr	r2, [pc, #608]	; (8002b0c <HAL_GPIO_Init+0x2a4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d058      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028b0:	4a96      	ldr	r2, [pc, #600]	; (8002b0c <HAL_GPIO_Init+0x2a4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d86f      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028b6:	4a96      	ldr	r2, [pc, #600]	; (8002b10 <HAL_GPIO_Init+0x2a8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d052      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028bc:	4a94      	ldr	r2, [pc, #592]	; (8002b10 <HAL_GPIO_Init+0x2a8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d869      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028c2:	4a94      	ldr	r2, [pc, #592]	; (8002b14 <HAL_GPIO_Init+0x2ac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04c      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028c8:	4a92      	ldr	r2, [pc, #584]	; (8002b14 <HAL_GPIO_Init+0x2ac>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d863      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028ce:	4a92      	ldr	r2, [pc, #584]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d046      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
 80028d4:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <HAL_GPIO_Init+0x2b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d85d      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d82a      	bhi.n	8002934 <HAL_GPIO_Init+0xcc>
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d859      	bhi.n	8002996 <HAL_GPIO_Init+0x12e>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_GPIO_Init+0x80>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	08002963 	.word	0x08002963
 80028ec:	0800293d 	.word	0x0800293d
 80028f0:	0800294f 	.word	0x0800294f
 80028f4:	08002991 	.word	0x08002991
 80028f8:	08002997 	.word	0x08002997
 80028fc:	08002997 	.word	0x08002997
 8002900:	08002997 	.word	0x08002997
 8002904:	08002997 	.word	0x08002997
 8002908:	08002997 	.word	0x08002997
 800290c:	08002997 	.word	0x08002997
 8002910:	08002997 	.word	0x08002997
 8002914:	08002997 	.word	0x08002997
 8002918:	08002997 	.word	0x08002997
 800291c:	08002997 	.word	0x08002997
 8002920:	08002997 	.word	0x08002997
 8002924:	08002997 	.word	0x08002997
 8002928:	08002997 	.word	0x08002997
 800292c:	08002945 	.word	0x08002945
 8002930:	08002959 	.word	0x08002959
 8002934:	4a79      	ldr	r2, [pc, #484]	; (8002b1c <HAL_GPIO_Init+0x2b4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800293a:	e02c      	b.n	8002996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e029      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	3304      	adds	r3, #4
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e024      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	3308      	adds	r3, #8
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e01f      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	330c      	adds	r3, #12
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e01a      	b.n	8002998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800296a:	2304      	movs	r3, #4
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e013      	b.n	8002998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	611a      	str	r2, [r3, #16]
          break;
 8002982:	e009      	b.n	8002998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002984:	2308      	movs	r3, #8
 8002986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	615a      	str	r2, [r3, #20]
          break;
 800298e:	e003      	b.n	8002998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x130>
          break;
 8002996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2bff      	cmp	r3, #255	; 0xff
 800299c:	d801      	bhi.n	80029a2 <HAL_GPIO_Init+0x13a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	e001      	b.n	80029a6 <HAL_GPIO_Init+0x13e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2bff      	cmp	r3, #255	; 0xff
 80029ac:	d802      	bhi.n	80029b4 <HAL_GPIO_Init+0x14c>
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_Init+0x152>
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	3b08      	subs	r3, #8
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	210f      	movs	r1, #15
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	6a39      	ldr	r1, [r7, #32]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	431a      	orrs	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80b1 	beq.w	8002b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_GPIO_Init+0x2b8>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a00:	4a48      	ldr	r2, [pc, #288]	; (8002b24 <HAL_GPIO_Init+0x2bc>)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <HAL_GPIO_Init+0x2c0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_GPIO_Init+0x1ec>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <HAL_GPIO_Init+0x2c4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00d      	beq.n	8002a50 <HAL_GPIO_Init+0x1e8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <HAL_GPIO_Init+0x2c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x1e4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3d      	ldr	r2, [pc, #244]	; (8002b34 <HAL_GPIO_Init+0x2cc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_GPIO_Init+0x1e0>
 8002a44:	2303      	movs	r3, #3
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e004      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e002      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_GPIO_Init+0x1ee>
 8002a54:	2300      	movs	r3, #0
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a66:	492f      	ldr	r1, [pc, #188]	; (8002b24 <HAL_GPIO_Init+0x2bc>)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	492c      	ldr	r1, [pc, #176]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4928      	ldr	r1, [pc, #160]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4922      	ldr	r1, [pc, #136]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	491e      	ldr	r1, [pc, #120]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4918      	ldr	r1, [pc, #96]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	4914      	ldr	r1, [pc, #80]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d021      	beq.n	8002b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
 8002b04:	e021      	b.n	8002b4a <HAL_GPIO_Init+0x2e2>
 8002b06:	bf00      	nop
 8002b08:	10320000 	.word	0x10320000
 8002b0c:	10310000 	.word	0x10310000
 8002b10:	10220000 	.word	0x10220000
 8002b14:	10210000 	.word	0x10210000
 8002b18:	10120000 	.word	0x10120000
 8002b1c:	10110000 	.word	0x10110000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010800 	.word	0x40010800
 8002b2c:	40010c00 	.word	0x40010c00
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_GPIO_Init+0x304>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4909      	ldr	r1, [pc, #36]	; (8002b6c <HAL_GPIO_Init+0x304>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f ae8e 	bne.w	800287c <HAL_GPIO_Init+0x14>
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	372c      	adds	r7, #44	; 0x2c
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40010400 	.word	0x40010400

08002b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]
 8002baa:	4613      	mov	r3, r2
 8002bac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bae:	787b      	ldrb	r3, [r7, #1]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bba:	e003      	b.n	8002bc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	041a      	lsls	r2, r3, #16
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	611a      	str	r2, [r3, #16]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e272      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d112      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
 8002c08:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x12c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d168      	bne.n	8002cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e24c      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x76>
 8002c38:	4b80      	ldr	r3, [pc, #512]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7f      	ldr	r2, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e02e      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7a      	ldr	r2, [pc, #488]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a77      	ldr	r2, [pc, #476]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0xbc>
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a71      	ldr	r2, [pc, #452]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6e      	ldr	r2, [pc, #440]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c8c:	4b6b      	ldr	r3, [pc, #428]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fcca 	bl	8002644 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fcc6 	bl	8002644 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e200      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b5d      	ldr	r3, [pc, #372]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe4>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fcb6 	bl	8002644 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fcb2 	bl	8002644 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1ec      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x10c>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0a:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d16:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x18c>
 8002d22:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1c0      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4939      	ldr	r1, [pc, #228]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x270>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7ff fc6b 	bl	8002644 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7ff fc67 	bl	8002644 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1a1      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4927      	ldr	r1, [pc, #156]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCC_OscConfig+0x270>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff fc4a 	bl	8002644 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db4:	f7ff fc46 	bl	8002644 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e180      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03a      	beq.n	8002e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d019      	beq.n	8002e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff fc2a 	bl	8002644 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7ff fc26 	bl	8002644 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e160      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 fad8 	bl	80033c8 <RCC_Delay>
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7ff fc10 	bl	8002644 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e26:	e00f      	b.n	8002e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7ff fc0c 	bl	8002644 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e146      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	42420000 	.word	0x42420000
 8002e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e9      	bne.n	8002e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a6 	beq.w	8002fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a87      	ldr	r2, [pc, #540]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b85      	ldr	r3, [pc, #532]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b82      	ldr	r3, [pc, #520]	; (8003098 <HAL_RCC_OscConfig+0x4c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	; (8003098 <HAL_RCC_OscConfig+0x4c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7e      	ldr	r2, [pc, #504]	; (8003098 <HAL_RCC_OscConfig+0x4c8>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff fbcd 	bl	8002644 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7ff fbc9 	bl	8002644 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e103      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b75      	ldr	r3, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x4c8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x312>
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002eea:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a69      	ldr	r2, [pc, #420]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4b67      	ldr	r3, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a66      	ldr	r2, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	e01c      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_OscConfig+0x356>
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a60      	ldr	r2, [pc, #384]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a5d      	ldr	r2, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002f26:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a5a      	ldr	r2, [pc, #360]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4b58      	ldr	r3, [pc, #352]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7ff fb7d 	bl	8002644 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7ff fb79 	bl	8002644 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0b1      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ee      	beq.n	8002f4e <HAL_RCC_OscConfig+0x37e>
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7ff fb67 	bl	8002644 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7ff fb63 	bl	8002644 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e09b      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	4b40      	ldr	r3, [pc, #256]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ee      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8087 	beq.w	80030c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d061      	beq.n	8003088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d146      	bne.n	800305a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7ff fb37 	bl	8002644 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fda:	f7ff fb33 	bl	8002644 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e06d      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d108      	bne.n	8003014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4921      	ldr	r1, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a19      	ldr	r1, [r3, #32]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	430b      	orrs	r3, r1
 8003026:	491b      	ldr	r1, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4cc>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7ff fb07 	bl	8002644 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7ff fb03 	bl	8002644 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e03d      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x46a>
 8003058:	e035      	b.n	80030c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x4cc>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff faf0 	bl	8002644 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7ff faec 	bl	8002644 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e026      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x498>
 8003086:	e01e      	b.n	80030c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e019      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_OscConfig+0x500>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4965      	ldr	r1, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800313a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7ff fa3e 	bl	8002644 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7ff fa3a 	bl	8002644 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4922      	ldr	r1, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1cc>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f99c 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40022000 	.word	0x40022000
 8003298:	40021000 	.word	0x40021000
 800329c:	080041a0 	.word	0x080041a0
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004

080032a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	b490      	push	{r4, r7}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_GetSysClockFreq+0xac>)
 80032b0:	1d3c      	adds	r4, r7, #4
 80032b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032b8:	f240 2301 	movw	r3, #513	; 0x201
 80032bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032d2:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x46>
 80032e6:	e02b      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ea:	623b      	str	r3, [r7, #32]
      break;
 80032ec:	e02b      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3328      	adds	r3, #40	; 0x28
 80032f8:	443b      	add	r3, r7
 80032fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_RCC_GetSysClockFreq+0xb0>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	0c5b      	lsrs	r3, r3, #17
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	3328      	adds	r3, #40	; 0x28
 8003316:	443b      	add	r3, r7
 8003318:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800331c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003322:	fb03 f202 	mul.w	r2, r3, r2
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	e004      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	623b      	str	r3, [r7, #32]
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003342:	623b      	str	r3, [r7, #32]
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	6a3b      	ldr	r3, [r7, #32]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	; 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc90      	pop	{r4, r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	08004190 	.word	0x08004190
 8003358:	40021000 	.word	0x40021000
 800335c:	007a1200 	.word	0x007a1200
 8003360:	003d0900 	.word	0x003d0900

08003364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b02      	ldr	r3, [pc, #8]	; (8003374 <HAL_RCC_GetHCLKFreq+0x10>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff2 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	080041b0 	.word	0x080041b0

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffde 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0adb      	lsrs	r3, r3, #11
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	080041b0 	.word	0x080041b0

080033c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <RCC_Delay+0x34>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <RCC_Delay+0x38>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0a5b      	lsrs	r3, r3, #9
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033e4:	bf00      	nop
  }
  while (Delay --);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	60fa      	str	r2, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <RCC_Delay+0x1c>
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	20000000 	.word	0x20000000
 8003400:	10624dd3 	.word	0x10624dd3

08003404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03f      	b.n	8003496 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff f840 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f905 	bl	8003658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	; 0x28
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d17c      	bne.n	80035b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_UART_Transmit+0x2c>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e075      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x3e>
 80034d8:	2302      	movs	r3, #2
 80034da:	e06e      	b.n	80035ba <HAL_UART_Transmit+0x11c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	; 0x21
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7ff f8a7 	bl	8002644 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350c:	d108      	bne.n	8003520 <HAL_UART_Transmit+0x82>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e003      	b.n	8003528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003530:	e02a      	b.n	8003588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f840 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e036      	b.n	80035ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	3302      	adds	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e007      	b.n	800357a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1cf      	bne.n	8003532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	2140      	movs	r1, #64	; 0x40
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f810 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e006      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d2:	e02c      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d028      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e2:	f7ff f82f 	bl	8002644 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d21d      	bcs.n	800362e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003600:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e00f      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d0c3      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003692:	f023 030c 	bic.w	r3, r3, #12
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	430b      	orrs	r3, r1
 800369e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	; (800376c <UART_SetConfig+0x114>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d103      	bne.n	80036c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7ff fe6e 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	e002      	b.n	80036ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7ff fe56 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80036cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <UART_SetConfig+0x118>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	0119      	lsls	r1, r3, #4
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fbb2 f2f3 	udiv	r2, r2, r3
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <UART_SetConfig+0x118>)
 8003706:	fba3 0302 	umull	r0, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2064      	movs	r0, #100	; 0x64
 800370e:	fb00 f303 	mul.w	r3, r0, r3
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	3332      	adds	r3, #50	; 0x32
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <UART_SetConfig+0x118>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	4419      	add	r1, r3
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <UART_SetConfig+0x118>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2064      	movs	r0, #100	; 0x64
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <UART_SetConfig+0x118>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	440a      	add	r2, r1
 8003762:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40013800 	.word	0x40013800
 8003770:	51eb851f 	.word	0x51eb851f

08003774 <__errno>:
 8003774:	4b01      	ldr	r3, [pc, #4]	; (800377c <__errno+0x8>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000000c 	.word	0x2000000c

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	2600      	movs	r6, #0
 8003784:	4d0c      	ldr	r5, [pc, #48]	; (80037b8 <__libc_init_array+0x38>)
 8003786:	4c0d      	ldr	r4, [pc, #52]	; (80037bc <__libc_init_array+0x3c>)
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	42a6      	cmp	r6, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	f000 fc9c 	bl	80040cc <_init>
 8003794:	2600      	movs	r6, #0
 8003796:	4d0a      	ldr	r5, [pc, #40]	; (80037c0 <__libc_init_array+0x40>)
 8003798:	4c0a      	ldr	r4, [pc, #40]	; (80037c4 <__libc_init_array+0x44>)
 800379a:	1b64      	subs	r4, r4, r5
 800379c:	10a4      	asrs	r4, r4, #2
 800379e:	42a6      	cmp	r6, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a8:	4798      	blx	r3
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b2:	4798      	blx	r3
 80037b4:	3601      	adds	r6, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	080041f4 	.word	0x080041f4
 80037bc:	080041f4 	.word	0x080041f4
 80037c0:	080041f4 	.word	0x080041f4
 80037c4:	080041f8 	.word	0x080041f8

080037c8 <memset>:
 80037c8:	4603      	mov	r3, r0
 80037ca:	4402      	add	r2, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <siprintf>:
 80037d8:	b40e      	push	{r1, r2, r3}
 80037da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037de:	b500      	push	{lr}
 80037e0:	b09c      	sub	sp, #112	; 0x70
 80037e2:	ab1d      	add	r3, sp, #116	; 0x74
 80037e4:	9002      	str	r0, [sp, #8]
 80037e6:	9006      	str	r0, [sp, #24]
 80037e8:	9107      	str	r1, [sp, #28]
 80037ea:	9104      	str	r1, [sp, #16]
 80037ec:	4808      	ldr	r0, [pc, #32]	; (8003810 <siprintf+0x38>)
 80037ee:	4909      	ldr	r1, [pc, #36]	; (8003814 <siprintf+0x3c>)
 80037f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037f4:	9105      	str	r1, [sp, #20]
 80037f6:	6800      	ldr	r0, [r0, #0]
 80037f8:	a902      	add	r1, sp, #8
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	f000 f868 	bl	80038d0 <_svfiprintf_r>
 8003800:	2200      	movs	r2, #0
 8003802:	9b02      	ldr	r3, [sp, #8]
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	b01c      	add	sp, #112	; 0x70
 8003808:	f85d eb04 	ldr.w	lr, [sp], #4
 800380c:	b003      	add	sp, #12
 800380e:	4770      	bx	lr
 8003810:	2000000c 	.word	0x2000000c
 8003814:	ffff0208 	.word	0xffff0208

08003818 <__ssputs_r>:
 8003818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	688e      	ldr	r6, [r1, #8]
 800381e:	4682      	mov	sl, r0
 8003820:	429e      	cmp	r6, r3
 8003822:	460c      	mov	r4, r1
 8003824:	4690      	mov	r8, r2
 8003826:	461f      	mov	r7, r3
 8003828:	d838      	bhi.n	800389c <__ssputs_r+0x84>
 800382a:	898a      	ldrh	r2, [r1, #12]
 800382c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003830:	d032      	beq.n	8003898 <__ssputs_r+0x80>
 8003832:	6825      	ldr	r5, [r4, #0]
 8003834:	6909      	ldr	r1, [r1, #16]
 8003836:	3301      	adds	r3, #1
 8003838:	eba5 0901 	sub.w	r9, r5, r1
 800383c:	6965      	ldr	r5, [r4, #20]
 800383e:	444b      	add	r3, r9
 8003840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003848:	106d      	asrs	r5, r5, #1
 800384a:	429d      	cmp	r5, r3
 800384c:	bf38      	it	cc
 800384e:	461d      	movcc	r5, r3
 8003850:	0553      	lsls	r3, r2, #21
 8003852:	d531      	bpl.n	80038b8 <__ssputs_r+0xa0>
 8003854:	4629      	mov	r1, r5
 8003856:	f000 fb6f 	bl	8003f38 <_malloc_r>
 800385a:	4606      	mov	r6, r0
 800385c:	b950      	cbnz	r0, 8003874 <__ssputs_r+0x5c>
 800385e:	230c      	movs	r3, #12
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f8ca 3000 	str.w	r3, [sl]
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003874:	464a      	mov	r2, r9
 8003876:	6921      	ldr	r1, [r4, #16]
 8003878:	f000 face 	bl	8003e18 <memcpy>
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	6126      	str	r6, [r4, #16]
 800388a:	444e      	add	r6, r9
 800388c:	6026      	str	r6, [r4, #0]
 800388e:	463e      	mov	r6, r7
 8003890:	6165      	str	r5, [r4, #20]
 8003892:	eba5 0509 	sub.w	r5, r5, r9
 8003896:	60a5      	str	r5, [r4, #8]
 8003898:	42be      	cmp	r6, r7
 800389a:	d900      	bls.n	800389e <__ssputs_r+0x86>
 800389c:	463e      	mov	r6, r7
 800389e:	4632      	mov	r2, r6
 80038a0:	4641      	mov	r1, r8
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	f000 fac6 	bl	8003e34 <memmove>
 80038a8:	68a3      	ldr	r3, [r4, #8]
 80038aa:	2000      	movs	r0, #0
 80038ac:	1b9b      	subs	r3, r3, r6
 80038ae:	60a3      	str	r3, [r4, #8]
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	4433      	add	r3, r6
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	e7db      	b.n	8003870 <__ssputs_r+0x58>
 80038b8:	462a      	mov	r2, r5
 80038ba:	f000 fbb1 	bl	8004020 <_realloc_r>
 80038be:	4606      	mov	r6, r0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d1e1      	bne.n	8003888 <__ssputs_r+0x70>
 80038c4:	4650      	mov	r0, sl
 80038c6:	6921      	ldr	r1, [r4, #16]
 80038c8:	f000 face 	bl	8003e68 <_free_r>
 80038cc:	e7c7      	b.n	800385e <__ssputs_r+0x46>
	...

080038d0 <_svfiprintf_r>:
 80038d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	4698      	mov	r8, r3
 80038d6:	898b      	ldrh	r3, [r1, #12]
 80038d8:	4607      	mov	r7, r0
 80038da:	061b      	lsls	r3, r3, #24
 80038dc:	460d      	mov	r5, r1
 80038de:	4614      	mov	r4, r2
 80038e0:	b09d      	sub	sp, #116	; 0x74
 80038e2:	d50e      	bpl.n	8003902 <_svfiprintf_r+0x32>
 80038e4:	690b      	ldr	r3, [r1, #16]
 80038e6:	b963      	cbnz	r3, 8003902 <_svfiprintf_r+0x32>
 80038e8:	2140      	movs	r1, #64	; 0x40
 80038ea:	f000 fb25 	bl	8003f38 <_malloc_r>
 80038ee:	6028      	str	r0, [r5, #0]
 80038f0:	6128      	str	r0, [r5, #16]
 80038f2:	b920      	cbnz	r0, 80038fe <_svfiprintf_r+0x2e>
 80038f4:	230c      	movs	r3, #12
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	e0d1      	b.n	8003aa2 <_svfiprintf_r+0x1d2>
 80038fe:	2340      	movs	r3, #64	; 0x40
 8003900:	616b      	str	r3, [r5, #20]
 8003902:	2300      	movs	r3, #0
 8003904:	9309      	str	r3, [sp, #36]	; 0x24
 8003906:	2320      	movs	r3, #32
 8003908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800390c:	2330      	movs	r3, #48	; 0x30
 800390e:	f04f 0901 	mov.w	r9, #1
 8003912:	f8cd 800c 	str.w	r8, [sp, #12]
 8003916:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003abc <_svfiprintf_r+0x1ec>
 800391a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800391e:	4623      	mov	r3, r4
 8003920:	469a      	mov	sl, r3
 8003922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003926:	b10a      	cbz	r2, 800392c <_svfiprintf_r+0x5c>
 8003928:	2a25      	cmp	r2, #37	; 0x25
 800392a:	d1f9      	bne.n	8003920 <_svfiprintf_r+0x50>
 800392c:	ebba 0b04 	subs.w	fp, sl, r4
 8003930:	d00b      	beq.n	800394a <_svfiprintf_r+0x7a>
 8003932:	465b      	mov	r3, fp
 8003934:	4622      	mov	r2, r4
 8003936:	4629      	mov	r1, r5
 8003938:	4638      	mov	r0, r7
 800393a:	f7ff ff6d 	bl	8003818 <__ssputs_r>
 800393e:	3001      	adds	r0, #1
 8003940:	f000 80aa 	beq.w	8003a98 <_svfiprintf_r+0x1c8>
 8003944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003946:	445a      	add	r2, fp
 8003948:	9209      	str	r2, [sp, #36]	; 0x24
 800394a:	f89a 3000 	ldrb.w	r3, [sl]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80a2 	beq.w	8003a98 <_svfiprintf_r+0x1c8>
 8003954:	2300      	movs	r3, #0
 8003956:	f04f 32ff 	mov.w	r2, #4294967295
 800395a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800395e:	f10a 0a01 	add.w	sl, sl, #1
 8003962:	9304      	str	r3, [sp, #16]
 8003964:	9307      	str	r3, [sp, #28]
 8003966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800396a:	931a      	str	r3, [sp, #104]	; 0x68
 800396c:	4654      	mov	r4, sl
 800396e:	2205      	movs	r2, #5
 8003970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003974:	4851      	ldr	r0, [pc, #324]	; (8003abc <_svfiprintf_r+0x1ec>)
 8003976:	f000 fa41 	bl	8003dfc <memchr>
 800397a:	9a04      	ldr	r2, [sp, #16]
 800397c:	b9d8      	cbnz	r0, 80039b6 <_svfiprintf_r+0xe6>
 800397e:	06d0      	lsls	r0, r2, #27
 8003980:	bf44      	itt	mi
 8003982:	2320      	movmi	r3, #32
 8003984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003988:	0711      	lsls	r1, r2, #28
 800398a:	bf44      	itt	mi
 800398c:	232b      	movmi	r3, #43	; 0x2b
 800398e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003992:	f89a 3000 	ldrb.w	r3, [sl]
 8003996:	2b2a      	cmp	r3, #42	; 0x2a
 8003998:	d015      	beq.n	80039c6 <_svfiprintf_r+0xf6>
 800399a:	4654      	mov	r4, sl
 800399c:	2000      	movs	r0, #0
 800399e:	f04f 0c0a 	mov.w	ip, #10
 80039a2:	9a07      	ldr	r2, [sp, #28]
 80039a4:	4621      	mov	r1, r4
 80039a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039aa:	3b30      	subs	r3, #48	; 0x30
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	d94e      	bls.n	8003a4e <_svfiprintf_r+0x17e>
 80039b0:	b1b0      	cbz	r0, 80039e0 <_svfiprintf_r+0x110>
 80039b2:	9207      	str	r2, [sp, #28]
 80039b4:	e014      	b.n	80039e0 <_svfiprintf_r+0x110>
 80039b6:	eba0 0308 	sub.w	r3, r0, r8
 80039ba:	fa09 f303 	lsl.w	r3, r9, r3
 80039be:	4313      	orrs	r3, r2
 80039c0:	46a2      	mov	sl, r4
 80039c2:	9304      	str	r3, [sp, #16]
 80039c4:	e7d2      	b.n	800396c <_svfiprintf_r+0x9c>
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	1d19      	adds	r1, r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	9103      	str	r1, [sp, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfbb      	ittet	lt
 80039d2:	425b      	neglt	r3, r3
 80039d4:	f042 0202 	orrlt.w	r2, r2, #2
 80039d8:	9307      	strge	r3, [sp, #28]
 80039da:	9307      	strlt	r3, [sp, #28]
 80039dc:	bfb8      	it	lt
 80039de:	9204      	strlt	r2, [sp, #16]
 80039e0:	7823      	ldrb	r3, [r4, #0]
 80039e2:	2b2e      	cmp	r3, #46	; 0x2e
 80039e4:	d10c      	bne.n	8003a00 <_svfiprintf_r+0x130>
 80039e6:	7863      	ldrb	r3, [r4, #1]
 80039e8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ea:	d135      	bne.n	8003a58 <_svfiprintf_r+0x188>
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	3402      	adds	r4, #2
 80039f0:	1d1a      	adds	r2, r3, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	9203      	str	r2, [sp, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bfb8      	it	lt
 80039fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80039fe:	9305      	str	r3, [sp, #20]
 8003a00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003ac0 <_svfiprintf_r+0x1f0>
 8003a04:	2203      	movs	r2, #3
 8003a06:	4650      	mov	r0, sl
 8003a08:	7821      	ldrb	r1, [r4, #0]
 8003a0a:	f000 f9f7 	bl	8003dfc <memchr>
 8003a0e:	b140      	cbz	r0, 8003a22 <_svfiprintf_r+0x152>
 8003a10:	2340      	movs	r3, #64	; 0x40
 8003a12:	eba0 000a 	sub.w	r0, r0, sl
 8003a16:	fa03 f000 	lsl.w	r0, r3, r0
 8003a1a:	9b04      	ldr	r3, [sp, #16]
 8003a1c:	3401      	adds	r4, #1
 8003a1e:	4303      	orrs	r3, r0
 8003a20:	9304      	str	r3, [sp, #16]
 8003a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a26:	2206      	movs	r2, #6
 8003a28:	4826      	ldr	r0, [pc, #152]	; (8003ac4 <_svfiprintf_r+0x1f4>)
 8003a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a2e:	f000 f9e5 	bl	8003dfc <memchr>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d038      	beq.n	8003aa8 <_svfiprintf_r+0x1d8>
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <_svfiprintf_r+0x1f8>)
 8003a38:	bb1b      	cbnz	r3, 8003a82 <_svfiprintf_r+0x1b2>
 8003a3a:	9b03      	ldr	r3, [sp, #12]
 8003a3c:	3307      	adds	r3, #7
 8003a3e:	f023 0307 	bic.w	r3, r3, #7
 8003a42:	3308      	adds	r3, #8
 8003a44:	9303      	str	r3, [sp, #12]
 8003a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a48:	4433      	add	r3, r6
 8003a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a4c:	e767      	b.n	800391e <_svfiprintf_r+0x4e>
 8003a4e:	460c      	mov	r4, r1
 8003a50:	2001      	movs	r0, #1
 8003a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a56:	e7a5      	b.n	80039a4 <_svfiprintf_r+0xd4>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f04f 0c0a 	mov.w	ip, #10
 8003a5e:	4619      	mov	r1, r3
 8003a60:	3401      	adds	r4, #1
 8003a62:	9305      	str	r3, [sp, #20]
 8003a64:	4620      	mov	r0, r4
 8003a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a6a:	3a30      	subs	r2, #48	; 0x30
 8003a6c:	2a09      	cmp	r2, #9
 8003a6e:	d903      	bls.n	8003a78 <_svfiprintf_r+0x1a8>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0c5      	beq.n	8003a00 <_svfiprintf_r+0x130>
 8003a74:	9105      	str	r1, [sp, #20]
 8003a76:	e7c3      	b.n	8003a00 <_svfiprintf_r+0x130>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a80:	e7f0      	b.n	8003a64 <_svfiprintf_r+0x194>
 8003a82:	ab03      	add	r3, sp, #12
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	462a      	mov	r2, r5
 8003a88:	4638      	mov	r0, r7
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <_svfiprintf_r+0x1fc>)
 8003a8c:	a904      	add	r1, sp, #16
 8003a8e:	f3af 8000 	nop.w
 8003a92:	1c42      	adds	r2, r0, #1
 8003a94:	4606      	mov	r6, r0
 8003a96:	d1d6      	bne.n	8003a46 <_svfiprintf_r+0x176>
 8003a98:	89ab      	ldrh	r3, [r5, #12]
 8003a9a:	065b      	lsls	r3, r3, #25
 8003a9c:	f53f af2c 	bmi.w	80038f8 <_svfiprintf_r+0x28>
 8003aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aa2:	b01d      	add	sp, #116	; 0x74
 8003aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa8:	ab03      	add	r3, sp, #12
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	462a      	mov	r2, r5
 8003aae:	4638      	mov	r0, r7
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <_svfiprintf_r+0x1fc>)
 8003ab2:	a904      	add	r1, sp, #16
 8003ab4:	f000 f87c 	bl	8003bb0 <_printf_i>
 8003ab8:	e7eb      	b.n	8003a92 <_svfiprintf_r+0x1c2>
 8003aba:	bf00      	nop
 8003abc:	080041b8 	.word	0x080041b8
 8003ac0:	080041be 	.word	0x080041be
 8003ac4:	080041c2 	.word	0x080041c2
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	08003819 	.word	0x08003819

08003ad0 <_printf_common>:
 8003ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	4616      	mov	r6, r2
 8003ad6:	4699      	mov	r9, r3
 8003ad8:	688a      	ldr	r2, [r1, #8]
 8003ada:	690b      	ldr	r3, [r1, #16]
 8003adc:	4607      	mov	r7, r0
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bfb8      	it	lt
 8003ae2:	4613      	movlt	r3, r2
 8003ae4:	6033      	str	r3, [r6, #0]
 8003ae6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aea:	460c      	mov	r4, r1
 8003aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af0:	b10a      	cbz	r2, 8003af6 <_printf_common+0x26>
 8003af2:	3301      	adds	r3, #1
 8003af4:	6033      	str	r3, [r6, #0]
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	0699      	lsls	r1, r3, #26
 8003afa:	bf42      	ittt	mi
 8003afc:	6833      	ldrmi	r3, [r6, #0]
 8003afe:	3302      	addmi	r3, #2
 8003b00:	6033      	strmi	r3, [r6, #0]
 8003b02:	6825      	ldr	r5, [r4, #0]
 8003b04:	f015 0506 	ands.w	r5, r5, #6
 8003b08:	d106      	bne.n	8003b18 <_printf_common+0x48>
 8003b0a:	f104 0a19 	add.w	sl, r4, #25
 8003b0e:	68e3      	ldr	r3, [r4, #12]
 8003b10:	6832      	ldr	r2, [r6, #0]
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	42ab      	cmp	r3, r5
 8003b16:	dc28      	bgt.n	8003b6a <_printf_common+0x9a>
 8003b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b1c:	1e13      	subs	r3, r2, #0
 8003b1e:	6822      	ldr	r2, [r4, #0]
 8003b20:	bf18      	it	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	0692      	lsls	r2, r2, #26
 8003b26:	d42d      	bmi.n	8003b84 <_printf_common+0xb4>
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b30:	47c0      	blx	r8
 8003b32:	3001      	adds	r0, #1
 8003b34:	d020      	beq.n	8003b78 <_printf_common+0xa8>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	68e5      	ldr	r5, [r4, #12]
 8003b3a:	f003 0306 	and.w	r3, r3, #6
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf18      	it	ne
 8003b42:	2500      	movne	r5, #0
 8003b44:	6832      	ldr	r2, [r6, #0]
 8003b46:	f04f 0600 	mov.w	r6, #0
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	bf08      	it	eq
 8003b4e:	1aad      	subeq	r5, r5, r2
 8003b50:	6922      	ldr	r2, [r4, #16]
 8003b52:	bf08      	it	eq
 8003b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bfc4      	itt	gt
 8003b5c:	1a9b      	subgt	r3, r3, r2
 8003b5e:	18ed      	addgt	r5, r5, r3
 8003b60:	341a      	adds	r4, #26
 8003b62:	42b5      	cmp	r5, r6
 8003b64:	d11a      	bne.n	8003b9c <_printf_common+0xcc>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e008      	b.n	8003b7c <_printf_common+0xac>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4638      	mov	r0, r7
 8003b72:	47c0      	blx	r8
 8003b74:	3001      	adds	r0, #1
 8003b76:	d103      	bne.n	8003b80 <_printf_common+0xb0>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b80:	3501      	adds	r5, #1
 8003b82:	e7c4      	b.n	8003b0e <_printf_common+0x3e>
 8003b84:	2030      	movs	r0, #48	; 0x30
 8003b86:	18e1      	adds	r1, r4, r3
 8003b88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b92:	4422      	add	r2, r4
 8003b94:	3302      	adds	r3, #2
 8003b96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b9a:	e7c5      	b.n	8003b28 <_printf_common+0x58>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c0      	blx	r8
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d0e6      	beq.n	8003b78 <_printf_common+0xa8>
 8003baa:	3601      	adds	r6, #1
 8003bac:	e7d9      	b.n	8003b62 <_printf_common+0x92>
	...

08003bb0 <_printf_i>:
 8003bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb4:	7e0f      	ldrb	r7, [r1, #24]
 8003bb6:	4691      	mov	r9, r2
 8003bb8:	2f78      	cmp	r7, #120	; 0x78
 8003bba:	4680      	mov	r8, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	469a      	mov	sl, r3
 8003bc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bc6:	d807      	bhi.n	8003bd8 <_printf_i+0x28>
 8003bc8:	2f62      	cmp	r7, #98	; 0x62
 8003bca:	d80a      	bhi.n	8003be2 <_printf_i+0x32>
 8003bcc:	2f00      	cmp	r7, #0
 8003bce:	f000 80d9 	beq.w	8003d84 <_printf_i+0x1d4>
 8003bd2:	2f58      	cmp	r7, #88	; 0x58
 8003bd4:	f000 80a4 	beq.w	8003d20 <_printf_i+0x170>
 8003bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003be0:	e03a      	b.n	8003c58 <_printf_i+0xa8>
 8003be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003be6:	2b15      	cmp	r3, #21
 8003be8:	d8f6      	bhi.n	8003bd8 <_printf_i+0x28>
 8003bea:	a101      	add	r1, pc, #4	; (adr r1, 8003bf0 <_printf_i+0x40>)
 8003bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003bd9 	.word	0x08003bd9
 8003bfc:	08003bd9 	.word	0x08003bd9
 8003c00:	08003bd9 	.word	0x08003bd9
 8003c04:	08003bd9 	.word	0x08003bd9
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003bd9 	.word	0x08003bd9
 8003c10:	08003bd9 	.word	0x08003bd9
 8003c14:	08003bd9 	.word	0x08003bd9
 8003c18:	08003bd9 	.word	0x08003bd9
 8003c1c:	08003d6b 	.word	0x08003d6b
 8003c20:	08003c8d 	.word	0x08003c8d
 8003c24:	08003d4d 	.word	0x08003d4d
 8003c28:	08003bd9 	.word	0x08003bd9
 8003c2c:	08003bd9 	.word	0x08003bd9
 8003c30:	08003d8d 	.word	0x08003d8d
 8003c34:	08003bd9 	.word	0x08003bd9
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003bd9 	.word	0x08003bd9
 8003c40:	08003bd9 	.word	0x08003bd9
 8003c44:	08003d55 	.word	0x08003d55
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	1d1a      	adds	r2, r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	602a      	str	r2, [r5, #0]
 8003c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0a4      	b.n	8003da6 <_printf_i+0x1f6>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	6829      	ldr	r1, [r5, #0]
 8003c60:	0606      	lsls	r6, r0, #24
 8003c62:	f101 0304 	add.w	r3, r1, #4
 8003c66:	d50a      	bpl.n	8003c7e <_printf_i+0xce>
 8003c68:	680e      	ldr	r6, [r1, #0]
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	da03      	bge.n	8003c78 <_printf_i+0xc8>
 8003c70:	232d      	movs	r3, #45	; 0x2d
 8003c72:	4276      	negs	r6, r6
 8003c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c78:	230a      	movs	r3, #10
 8003c7a:	485e      	ldr	r0, [pc, #376]	; (8003df4 <_printf_i+0x244>)
 8003c7c:	e019      	b.n	8003cb2 <_printf_i+0x102>
 8003c7e:	680e      	ldr	r6, [r1, #0]
 8003c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	bf18      	it	ne
 8003c88:	b236      	sxthne	r6, r6
 8003c8a:	e7ef      	b.n	8003c6c <_printf_i+0xbc>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1d19      	adds	r1, r3, #4
 8003c92:	6029      	str	r1, [r5, #0]
 8003c94:	0601      	lsls	r1, r0, #24
 8003c96:	d501      	bpl.n	8003c9c <_printf_i+0xec>
 8003c98:	681e      	ldr	r6, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <_printf_i+0xf2>
 8003c9c:	0646      	lsls	r6, r0, #25
 8003c9e:	d5fb      	bpl.n	8003c98 <_printf_i+0xe8>
 8003ca0:	881e      	ldrh	r6, [r3, #0]
 8003ca2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2308      	moveq	r3, #8
 8003ca8:	230a      	movne	r3, #10
 8003caa:	4852      	ldr	r0, [pc, #328]	; (8003df4 <_printf_i+0x244>)
 8003cac:	2100      	movs	r1, #0
 8003cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cb2:	6865      	ldr	r5, [r4, #4]
 8003cb4:	2d00      	cmp	r5, #0
 8003cb6:	bfa8      	it	ge
 8003cb8:	6821      	ldrge	r1, [r4, #0]
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	bfa4      	itt	ge
 8003cbe:	f021 0104 	bicge.w	r1, r1, #4
 8003cc2:	6021      	strge	r1, [r4, #0]
 8003cc4:	b90e      	cbnz	r6, 8003cca <_printf_i+0x11a>
 8003cc6:	2d00      	cmp	r5, #0
 8003cc8:	d04d      	beq.n	8003d66 <_printf_i+0x1b6>
 8003cca:	4615      	mov	r5, r2
 8003ccc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd0:	fb03 6711 	mls	r7, r3, r1, r6
 8003cd4:	5dc7      	ldrb	r7, [r0, r7]
 8003cd6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cda:	4637      	mov	r7, r6
 8003cdc:	42bb      	cmp	r3, r7
 8003cde:	460e      	mov	r6, r1
 8003ce0:	d9f4      	bls.n	8003ccc <_printf_i+0x11c>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d10b      	bne.n	8003cfe <_printf_i+0x14e>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	07de      	lsls	r6, r3, #31
 8003cea:	d508      	bpl.n	8003cfe <_printf_i+0x14e>
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	6861      	ldr	r1, [r4, #4]
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	bfde      	ittt	le
 8003cf4:	2330      	movle	r3, #48	; 0x30
 8003cf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cfe:	1b52      	subs	r2, r2, r5
 8003d00:	6122      	str	r2, [r4, #16]
 8003d02:	464b      	mov	r3, r9
 8003d04:	4621      	mov	r1, r4
 8003d06:	4640      	mov	r0, r8
 8003d08:	f8cd a000 	str.w	sl, [sp]
 8003d0c:	aa03      	add	r2, sp, #12
 8003d0e:	f7ff fedf 	bl	8003ad0 <_printf_common>
 8003d12:	3001      	adds	r0, #1
 8003d14:	d14c      	bne.n	8003db0 <_printf_i+0x200>
 8003d16:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1a:	b004      	add	sp, #16
 8003d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d20:	4834      	ldr	r0, [pc, #208]	; (8003df4 <_printf_i+0x244>)
 8003d22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d26:	6829      	ldr	r1, [r5, #0]
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d2e:	6029      	str	r1, [r5, #0]
 8003d30:	061d      	lsls	r5, r3, #24
 8003d32:	d514      	bpl.n	8003d5e <_printf_i+0x1ae>
 8003d34:	07df      	lsls	r7, r3, #31
 8003d36:	bf44      	itt	mi
 8003d38:	f043 0320 	orrmi.w	r3, r3, #32
 8003d3c:	6023      	strmi	r3, [r4, #0]
 8003d3e:	b91e      	cbnz	r6, 8003d48 <_printf_i+0x198>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	f023 0320 	bic.w	r3, r3, #32
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	2310      	movs	r3, #16
 8003d4a:	e7af      	b.n	8003cac <_printf_i+0xfc>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	f043 0320 	orr.w	r3, r3, #32
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	2378      	movs	r3, #120	; 0x78
 8003d56:	4828      	ldr	r0, [pc, #160]	; (8003df8 <_printf_i+0x248>)
 8003d58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d5c:	e7e3      	b.n	8003d26 <_printf_i+0x176>
 8003d5e:	0659      	lsls	r1, r3, #25
 8003d60:	bf48      	it	mi
 8003d62:	b2b6      	uxthmi	r6, r6
 8003d64:	e7e6      	b.n	8003d34 <_printf_i+0x184>
 8003d66:	4615      	mov	r5, r2
 8003d68:	e7bb      	b.n	8003ce2 <_printf_i+0x132>
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	6826      	ldr	r6, [r4, #0]
 8003d6e:	1d18      	adds	r0, r3, #4
 8003d70:	6961      	ldr	r1, [r4, #20]
 8003d72:	6028      	str	r0, [r5, #0]
 8003d74:	0635      	lsls	r5, r6, #24
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	d501      	bpl.n	8003d7e <_printf_i+0x1ce>
 8003d7a:	6019      	str	r1, [r3, #0]
 8003d7c:	e002      	b.n	8003d84 <_printf_i+0x1d4>
 8003d7e:	0670      	lsls	r0, r6, #25
 8003d80:	d5fb      	bpl.n	8003d7a <_printf_i+0x1ca>
 8003d82:	8019      	strh	r1, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	4615      	mov	r5, r2
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	e7ba      	b.n	8003d02 <_printf_i+0x152>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	2100      	movs	r1, #0
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	602a      	str	r2, [r5, #0]
 8003d94:	681d      	ldr	r5, [r3, #0]
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 f82f 	bl	8003dfc <memchr>
 8003d9e:	b108      	cbz	r0, 8003da4 <_printf_i+0x1f4>
 8003da0:	1b40      	subs	r0, r0, r5
 8003da2:	6060      	str	r0, [r4, #4]
 8003da4:	6863      	ldr	r3, [r4, #4]
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	2300      	movs	r3, #0
 8003daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dae:	e7a8      	b.n	8003d02 <_printf_i+0x152>
 8003db0:	462a      	mov	r2, r5
 8003db2:	4649      	mov	r1, r9
 8003db4:	4640      	mov	r0, r8
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	47d0      	blx	sl
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d0ab      	beq.n	8003d16 <_printf_i+0x166>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	079b      	lsls	r3, r3, #30
 8003dc2:	d413      	bmi.n	8003dec <_printf_i+0x23c>
 8003dc4:	68e0      	ldr	r0, [r4, #12]
 8003dc6:	9b03      	ldr	r3, [sp, #12]
 8003dc8:	4298      	cmp	r0, r3
 8003dca:	bfb8      	it	lt
 8003dcc:	4618      	movlt	r0, r3
 8003dce:	e7a4      	b.n	8003d1a <_printf_i+0x16a>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	47d0      	blx	sl
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d09b      	beq.n	8003d16 <_printf_i+0x166>
 8003dde:	3501      	adds	r5, #1
 8003de0:	68e3      	ldr	r3, [r4, #12]
 8003de2:	9903      	ldr	r1, [sp, #12]
 8003de4:	1a5b      	subs	r3, r3, r1
 8003de6:	42ab      	cmp	r3, r5
 8003de8:	dcf2      	bgt.n	8003dd0 <_printf_i+0x220>
 8003dea:	e7eb      	b.n	8003dc4 <_printf_i+0x214>
 8003dec:	2500      	movs	r5, #0
 8003dee:	f104 0619 	add.w	r6, r4, #25
 8003df2:	e7f5      	b.n	8003de0 <_printf_i+0x230>
 8003df4:	080041c9 	.word	0x080041c9
 8003df8:	080041da 	.word	0x080041da

08003dfc <memchr>:
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	b2c9      	uxtb	r1, r1
 8003e02:	4402      	add	r2, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	d101      	bne.n	8003e0e <memchr+0x12>
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	e003      	b.n	8003e16 <memchr+0x1a>
 8003e0e:	7804      	ldrb	r4, [r0, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	428c      	cmp	r4, r1
 8003e14:	d1f6      	bne.n	8003e04 <memchr+0x8>
 8003e16:	bd10      	pop	{r4, pc}

08003e18 <memcpy>:
 8003e18:	440a      	add	r2, r1
 8003e1a:	4291      	cmp	r1, r2
 8003e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e20:	d100      	bne.n	8003e24 <memcpy+0xc>
 8003e22:	4770      	bx	lr
 8003e24:	b510      	push	{r4, lr}
 8003e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e2a:	4291      	cmp	r1, r2
 8003e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e30:	d1f9      	bne.n	8003e26 <memcpy+0xe>
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <memmove>:
 8003e34:	4288      	cmp	r0, r1
 8003e36:	b510      	push	{r4, lr}
 8003e38:	eb01 0402 	add.w	r4, r1, r2
 8003e3c:	d902      	bls.n	8003e44 <memmove+0x10>
 8003e3e:	4284      	cmp	r4, r0
 8003e40:	4623      	mov	r3, r4
 8003e42:	d807      	bhi.n	8003e54 <memmove+0x20>
 8003e44:	1e43      	subs	r3, r0, #1
 8003e46:	42a1      	cmp	r1, r4
 8003e48:	d008      	beq.n	8003e5c <memmove+0x28>
 8003e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e52:	e7f8      	b.n	8003e46 <memmove+0x12>
 8003e54:	4601      	mov	r1, r0
 8003e56:	4402      	add	r2, r0
 8003e58:	428a      	cmp	r2, r1
 8003e5a:	d100      	bne.n	8003e5e <memmove+0x2a>
 8003e5c:	bd10      	pop	{r4, pc}
 8003e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e66:	e7f7      	b.n	8003e58 <memmove+0x24>

08003e68 <_free_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	d040      	beq.n	8003ef2 <_free_r+0x8a>
 8003e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e74:	1f0c      	subs	r4, r1, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfb8      	it	lt
 8003e7a:	18e4      	addlt	r4, r4, r3
 8003e7c:	f000 f910 	bl	80040a0 <__malloc_lock>
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <_free_r+0x8c>)
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	b933      	cbnz	r3, 8003e94 <_free_r+0x2c>
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	6014      	str	r4, [r2, #0]
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e90:	f000 b90c 	b.w	80040ac <__malloc_unlock>
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d908      	bls.n	8003eaa <_free_r+0x42>
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	1821      	adds	r1, r4, r0
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	bf01      	itttt	eq
 8003ea0:	6819      	ldreq	r1, [r3, #0]
 8003ea2:	685b      	ldreq	r3, [r3, #4]
 8003ea4:	1809      	addeq	r1, r1, r0
 8003ea6:	6021      	streq	r1, [r4, #0]
 8003ea8:	e7ed      	b.n	8003e86 <_free_r+0x1e>
 8003eaa:	461a      	mov	r2, r3
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b10b      	cbz	r3, 8003eb4 <_free_r+0x4c>
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	d9fa      	bls.n	8003eaa <_free_r+0x42>
 8003eb4:	6811      	ldr	r1, [r2, #0]
 8003eb6:	1850      	adds	r0, r2, r1
 8003eb8:	42a0      	cmp	r0, r4
 8003eba:	d10b      	bne.n	8003ed4 <_free_r+0x6c>
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	4401      	add	r1, r0
 8003ec0:	1850      	adds	r0, r2, r1
 8003ec2:	4283      	cmp	r3, r0
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	d1e0      	bne.n	8003e8a <_free_r+0x22>
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4401      	add	r1, r0
 8003ece:	6011      	str	r1, [r2, #0]
 8003ed0:	6053      	str	r3, [r2, #4]
 8003ed2:	e7da      	b.n	8003e8a <_free_r+0x22>
 8003ed4:	d902      	bls.n	8003edc <_free_r+0x74>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	602b      	str	r3, [r5, #0]
 8003eda:	e7d6      	b.n	8003e8a <_free_r+0x22>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	1821      	adds	r1, r4, r0
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf01      	itttt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	1809      	addeq	r1, r1, r0
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	6063      	str	r3, [r4, #4]
 8003eee:	6054      	str	r4, [r2, #4]
 8003ef0:	e7cb      	b.n	8003e8a <_free_r+0x22>
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	2000021c 	.word	0x2000021c

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0e      	ldr	r6, [pc, #56]	; (8003f34 <sbrk_aligned+0x3c>)
 8003efc:	460c      	mov	r4, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	4605      	mov	r5, r0
 8003f02:	b911      	cbnz	r1, 8003f0a <sbrk_aligned+0x12>
 8003f04:	f000 f8bc 	bl	8004080 <_sbrk_r>
 8003f08:	6030      	str	r0, [r6, #0]
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 f8b7 	bl	8004080 <_sbrk_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d00a      	beq.n	8003f2c <sbrk_aligned+0x34>
 8003f16:	1cc4      	adds	r4, r0, #3
 8003f18:	f024 0403 	bic.w	r4, r4, #3
 8003f1c:	42a0      	cmp	r0, r4
 8003f1e:	d007      	beq.n	8003f30 <sbrk_aligned+0x38>
 8003f20:	1a21      	subs	r1, r4, r0
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 f8ac 	bl	8004080 <_sbrk_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d101      	bne.n	8003f30 <sbrk_aligned+0x38>
 8003f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	20000220 	.word	0x20000220

08003f38 <_malloc_r>:
 8003f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3c:	1ccd      	adds	r5, r1, #3
 8003f3e:	f025 0503 	bic.w	r5, r5, #3
 8003f42:	3508      	adds	r5, #8
 8003f44:	2d0c      	cmp	r5, #12
 8003f46:	bf38      	it	cc
 8003f48:	250c      	movcc	r5, #12
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	db01      	blt.n	8003f54 <_malloc_r+0x1c>
 8003f50:	42a9      	cmp	r1, r5
 8003f52:	d905      	bls.n	8003f60 <_malloc_r+0x28>
 8003f54:	230c      	movs	r3, #12
 8003f56:	2600      	movs	r6, #0
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f60:	4e2e      	ldr	r6, [pc, #184]	; (800401c <_malloc_r+0xe4>)
 8003f62:	f000 f89d 	bl	80040a0 <__malloc_lock>
 8003f66:	6833      	ldr	r3, [r6, #0]
 8003f68:	461c      	mov	r4, r3
 8003f6a:	bb34      	cbnz	r4, 8003fba <_malloc_r+0x82>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f7ff ffc2 	bl	8003ef8 <sbrk_aligned>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	4604      	mov	r4, r0
 8003f78:	d14d      	bne.n	8004016 <_malloc_r+0xde>
 8003f7a:	6834      	ldr	r4, [r6, #0]
 8003f7c:	4626      	mov	r6, r4
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	d140      	bne.n	8004004 <_malloc_r+0xcc>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	4631      	mov	r1, r6
 8003f86:	4638      	mov	r0, r7
 8003f88:	eb04 0803 	add.w	r8, r4, r3
 8003f8c:	f000 f878 	bl	8004080 <_sbrk_r>
 8003f90:	4580      	cmp	r8, r0
 8003f92:	d13a      	bne.n	800400a <_malloc_r+0xd2>
 8003f94:	6821      	ldr	r1, [r4, #0]
 8003f96:	3503      	adds	r5, #3
 8003f98:	1a6d      	subs	r5, r5, r1
 8003f9a:	f025 0503 	bic.w	r5, r5, #3
 8003f9e:	3508      	adds	r5, #8
 8003fa0:	2d0c      	cmp	r5, #12
 8003fa2:	bf38      	it	cc
 8003fa4:	250c      	movcc	r5, #12
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7ff ffa5 	bl	8003ef8 <sbrk_aligned>
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d02b      	beq.n	800400a <_malloc_r+0xd2>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	442b      	add	r3, r5
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	e00e      	b.n	8003fd8 <_malloc_r+0xa0>
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	1b52      	subs	r2, r2, r5
 8003fbe:	d41e      	bmi.n	8003ffe <_malloc_r+0xc6>
 8003fc0:	2a0b      	cmp	r2, #11
 8003fc2:	d916      	bls.n	8003ff2 <_malloc_r+0xba>
 8003fc4:	1961      	adds	r1, r4, r5
 8003fc6:	42a3      	cmp	r3, r4
 8003fc8:	6025      	str	r5, [r4, #0]
 8003fca:	bf18      	it	ne
 8003fcc:	6059      	strne	r1, [r3, #4]
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	bf08      	it	eq
 8003fd2:	6031      	streq	r1, [r6, #0]
 8003fd4:	5162      	str	r2, [r4, r5]
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f104 060b 	add.w	r6, r4, #11
 8003fde:	f000 f865 	bl	80040ac <__malloc_unlock>
 8003fe2:	f026 0607 	bic.w	r6, r6, #7
 8003fe6:	1d23      	adds	r3, r4, #4
 8003fe8:	1af2      	subs	r2, r6, r3
 8003fea:	d0b6      	beq.n	8003f5a <_malloc_r+0x22>
 8003fec:	1b9b      	subs	r3, r3, r6
 8003fee:	50a3      	str	r3, [r4, r2]
 8003ff0:	e7b3      	b.n	8003f5a <_malloc_r+0x22>
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	bf0c      	ite	eq
 8003ff8:	6032      	streq	r2, [r6, #0]
 8003ffa:	605a      	strne	r2, [r3, #4]
 8003ffc:	e7ec      	b.n	8003fd8 <_malloc_r+0xa0>
 8003ffe:	4623      	mov	r3, r4
 8004000:	6864      	ldr	r4, [r4, #4]
 8004002:	e7b2      	b.n	8003f6a <_malloc_r+0x32>
 8004004:	4634      	mov	r4, r6
 8004006:	6876      	ldr	r6, [r6, #4]
 8004008:	e7b9      	b.n	8003f7e <_malloc_r+0x46>
 800400a:	230c      	movs	r3, #12
 800400c:	4638      	mov	r0, r7
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	f000 f84c 	bl	80040ac <__malloc_unlock>
 8004014:	e7a1      	b.n	8003f5a <_malloc_r+0x22>
 8004016:	6025      	str	r5, [r4, #0]
 8004018:	e7de      	b.n	8003fd8 <_malloc_r+0xa0>
 800401a:	bf00      	nop
 800401c:	2000021c 	.word	0x2000021c

08004020 <_realloc_r>:
 8004020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004024:	4680      	mov	r8, r0
 8004026:	4614      	mov	r4, r2
 8004028:	460e      	mov	r6, r1
 800402a:	b921      	cbnz	r1, 8004036 <_realloc_r+0x16>
 800402c:	4611      	mov	r1, r2
 800402e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004032:	f7ff bf81 	b.w	8003f38 <_malloc_r>
 8004036:	b92a      	cbnz	r2, 8004044 <_realloc_r+0x24>
 8004038:	f7ff ff16 	bl	8003e68 <_free_r>
 800403c:	4625      	mov	r5, r4
 800403e:	4628      	mov	r0, r5
 8004040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004044:	f000 f838 	bl	80040b8 <_malloc_usable_size_r>
 8004048:	4284      	cmp	r4, r0
 800404a:	4607      	mov	r7, r0
 800404c:	d802      	bhi.n	8004054 <_realloc_r+0x34>
 800404e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004052:	d812      	bhi.n	800407a <_realloc_r+0x5a>
 8004054:	4621      	mov	r1, r4
 8004056:	4640      	mov	r0, r8
 8004058:	f7ff ff6e 	bl	8003f38 <_malloc_r>
 800405c:	4605      	mov	r5, r0
 800405e:	2800      	cmp	r0, #0
 8004060:	d0ed      	beq.n	800403e <_realloc_r+0x1e>
 8004062:	42bc      	cmp	r4, r7
 8004064:	4622      	mov	r2, r4
 8004066:	4631      	mov	r1, r6
 8004068:	bf28      	it	cs
 800406a:	463a      	movcs	r2, r7
 800406c:	f7ff fed4 	bl	8003e18 <memcpy>
 8004070:	4631      	mov	r1, r6
 8004072:	4640      	mov	r0, r8
 8004074:	f7ff fef8 	bl	8003e68 <_free_r>
 8004078:	e7e1      	b.n	800403e <_realloc_r+0x1e>
 800407a:	4635      	mov	r5, r6
 800407c:	e7df      	b.n	800403e <_realloc_r+0x1e>
	...

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	; (800409c <_sbrk_r+0x1c>)
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fe f9aa 	bl	80023e4 <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000224 	.word	0x20000224

080040a0 <__malloc_lock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_lock+0x8>)
 80040a2:	f000 b811 	b.w	80040c8 <__retarget_lock_acquire_recursive>
 80040a6:	bf00      	nop
 80040a8:	20000228 	.word	0x20000228

080040ac <__malloc_unlock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_unlock+0x8>)
 80040ae:	f000 b80c 	b.w	80040ca <__retarget_lock_release_recursive>
 80040b2:	bf00      	nop
 80040b4:	20000228 	.word	0x20000228

080040b8 <_malloc_usable_size_r>:
 80040b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040bc:	1f18      	subs	r0, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfbc      	itt	lt
 80040c2:	580b      	ldrlt	r3, [r1, r0]
 80040c4:	18c0      	addlt	r0, r0, r3
 80040c6:	4770      	bx	lr

080040c8 <__retarget_lock_acquire_recursive>:
 80040c8:	4770      	bx	lr

080040ca <__retarget_lock_release_recursive>:
 80040ca:	4770      	bx	lr

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr
